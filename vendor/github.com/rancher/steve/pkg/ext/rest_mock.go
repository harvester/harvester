// Code generated by MockGen. DO NOT EDIT.

// Package ext is a generated GoMock package.
package ext

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockUpdatedObjectInfo is a mock of UpdatedObjectInfo interface.
type MockUpdatedObjectInfo struct {
	ctrl     *gomock.Controller
	recorder *MockUpdatedObjectInfoMockRecorder
	isgomock struct{}
}

// MockUpdatedObjectInfoMockRecorder is the mock recorder for MockUpdatedObjectInfo.
type MockUpdatedObjectInfoMockRecorder struct {
	mock *MockUpdatedObjectInfo
}

// NewMockUpdatedObjectInfo creates a new mock instance.
func NewMockUpdatedObjectInfo(ctrl *gomock.Controller) *MockUpdatedObjectInfo {
	mock := &MockUpdatedObjectInfo{ctrl: ctrl}
	mock.recorder = &MockUpdatedObjectInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdatedObjectInfo) EXPECT() *MockUpdatedObjectInfoMockRecorder {
	return m.recorder
}

// Preconditions mocks base method.
func (m *MockUpdatedObjectInfo) Preconditions() *v1.Preconditions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preconditions")
	ret0, _ := ret[0].(*v1.Preconditions)
	return ret0
}

// Preconditions indicates an expected call of Preconditions.
func (mr *MockUpdatedObjectInfoMockRecorder) Preconditions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preconditions", reflect.TypeOf((*MockUpdatedObjectInfo)(nil).Preconditions))
}

// UpdatedObject mocks base method.
func (m *MockUpdatedObjectInfo) UpdatedObject(ctx context.Context, oldObj runtime.Object) (runtime.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatedObject", ctx, oldObj)
	ret0, _ := ret[0].(runtime.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatedObject indicates an expected call of UpdatedObject.
func (mr *MockUpdatedObjectInfoMockRecorder) UpdatedObject(ctx, oldObj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedObject", reflect.TypeOf((*MockUpdatedObjectInfo)(nil).UpdatedObject), ctx, oldObj)
}
