// Copyright The Helm Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: release.proto

package helmv2api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Release describes a deployment of a chart, together with the chart
// and the variables used to deploy that chart.
type Release struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the name of the release
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Info provides information about a release
	Info *Info `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// Chart is the chart that was released.
	Chart *Chart `protobuf:"bytes,3,opt,name=chart,proto3" json:"chart,omitempty"`
	// Config is the set of extra Values added to the chart.
	// These values override the default values inside of the chart.
	Config *Config `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	// Manifest is the string representation of the rendered template.
	Manifest string `protobuf:"bytes,5,opt,name=manifest,proto3" json:"manifest,omitempty"`
	// Hooks are all of the hooks declared for this release.
	Hooks []*Hook `protobuf:"bytes,6,rep,name=hooks,proto3" json:"hooks,omitempty"`
	// Version is an int32 which represents the version of the release.
	Version int32 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	// Namespace is the kubernetes namespace of the release.
	Namespace     string `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Release) Reset() {
	*x = Release{}
	mi := &file_release_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_release_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_release_proto_rawDescGZIP(), []int{0}
}

func (x *Release) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Release) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Release) GetChart() *Chart {
	if x != nil {
		return x.Chart
	}
	return nil
}

func (x *Release) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Release) GetManifest() string {
	if x != nil {
		return x.Manifest
	}
	return ""
}

func (x *Release) GetHooks() []*Hook {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *Release) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Release) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

var File_release_proto protoreflect.FileDescriptor

const file_release_proto_rawDesc = "" +
	"\n" +
	"\rrelease.proto\x12\x15legacytypes.helmv2api\x1a\n" +
	"hook.proto\x1a\n" +
	"info.proto\x1a\fconfig.proto\x1a\vchart.proto\"\xc0\x02\n" +
	"\aRelease\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12/\n" +
	"\x04info\x18\x02 \x01(\v2\x1b.legacytypes.helmv2api.InfoR\x04info\x122\n" +
	"\x05chart\x18\x03 \x01(\v2\x1c.legacytypes.helmv2api.ChartR\x05chart\x125\n" +
	"\x06config\x18\x04 \x01(\v2\x1d.legacytypes.helmv2api.ConfigR\x06config\x12\x1a\n" +
	"\bmanifest\x18\x05 \x01(\tR\bmanifest\x121\n" +
	"\x05hooks\x18\x06 \x03(\v2\x1b.legacytypes.helmv2api.HookR\x05hooks\x12\x18\n" +
	"\aversion\x18\a \x01(\x05R\aversion\x12\x1c\n" +
	"\tnamespace\x18\b \x01(\tR\tnamespaceBRZPgithub.com/rancher/steve/pkg/resources/formatters/internal/legacytypes/helmv2apib\x06proto3"

var (
	file_release_proto_rawDescOnce sync.Once
	file_release_proto_rawDescData []byte
)

func file_release_proto_rawDescGZIP() []byte {
	file_release_proto_rawDescOnce.Do(func() {
		file_release_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_release_proto_rawDesc), len(file_release_proto_rawDesc)))
	})
	return file_release_proto_rawDescData
}

var file_release_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_release_proto_goTypes = []any{
	(*Release)(nil), // 0: legacytypes.helmv2api.Release
	(*Info)(nil),    // 1: legacytypes.helmv2api.Info
	(*Chart)(nil),   // 2: legacytypes.helmv2api.Chart
	(*Config)(nil),  // 3: legacytypes.helmv2api.Config
	(*Hook)(nil),    // 4: legacytypes.helmv2api.Hook
}
var file_release_proto_depIdxs = []int32{
	1, // 0: legacytypes.helmv2api.Release.info:type_name -> legacytypes.helmv2api.Info
	2, // 1: legacytypes.helmv2api.Release.chart:type_name -> legacytypes.helmv2api.Chart
	3, // 2: legacytypes.helmv2api.Release.config:type_name -> legacytypes.helmv2api.Config
	4, // 3: legacytypes.helmv2api.Release.hooks:type_name -> legacytypes.helmv2api.Hook
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_release_proto_init() }
func file_release_proto_init() {
	if File_release_proto != nil {
		return
	}
	file_hook_proto_init()
	file_info_proto_init()
	file_config_proto_init()
	file_chart_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_release_proto_rawDesc), len(file_release_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_release_proto_goTypes,
		DependencyIndexes: file_release_proto_depIdxs,
		MessageInfos:      file_release_proto_msgTypes,
	}.Build()
	File_release_proto = out.File
	file_release_proto_goTypes = nil
	file_release_proto_depIdxs = nil
}
