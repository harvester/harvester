// Copyright The Helm Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: chart.proto

package helmv2api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Chart is a helm package that contains metadata, a default config, zero or more
// optionally parameterizable templates, and zero or more charts (dependencies).
type Chart struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Contents of the Chartfile.
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Templates for this chart.
	Templates []*Template `protobuf:"bytes,2,rep,name=templates,proto3" json:"templates,omitempty"`
	// Charts that this chart depends on.
	Dependencies []*Chart `protobuf:"bytes,3,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	// Default config for this template.
	Values *Config `protobuf:"bytes,4,opt,name=values,proto3" json:"values,omitempty"`
	// Miscellaneous files in a chart archive,
	// e.g. README, LICENSE, etc.
	Files         []*anypb.Any `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Chart) Reset() {
	*x = Chart{}
	mi := &file_chart_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart) ProtoMessage() {}

func (x *Chart) ProtoReflect() protoreflect.Message {
	mi := &file_chart_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart.ProtoReflect.Descriptor instead.
func (*Chart) Descriptor() ([]byte, []int) {
	return file_chart_proto_rawDescGZIP(), []int{0}
}

func (x *Chart) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Chart) GetTemplates() []*Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *Chart) GetDependencies() []*Chart {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Chart) GetValues() *Config {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Chart) GetFiles() []*anypb.Any {
	if x != nil {
		return x.Files
	}
	return nil
}

var File_chart_proto protoreflect.FileDescriptor

const file_chart_proto_rawDesc = "" +
	"\n" +
	"\vchart.proto\x12\x15legacytypes.helmv2api\x1a\fconfig.proto\x1a\x0emetadata.proto\x1a\x0etemplate.proto\x1a\x19google/protobuf/any.proto\"\xa8\x02\n" +
	"\x05Chart\x12;\n" +
	"\bmetadata\x18\x01 \x01(\v2\x1f.legacytypes.helmv2api.MetadataR\bmetadata\x12=\n" +
	"\ttemplates\x18\x02 \x03(\v2\x1f.legacytypes.helmv2api.TemplateR\ttemplates\x12@\n" +
	"\fdependencies\x18\x03 \x03(\v2\x1c.legacytypes.helmv2api.ChartR\fdependencies\x125\n" +
	"\x06values\x18\x04 \x01(\v2\x1d.legacytypes.helmv2api.ConfigR\x06values\x12*\n" +
	"\x05files\x18\x05 \x03(\v2\x14.google.protobuf.AnyR\x05filesBRZPgithub.com/rancher/steve/pkg/resources/formatters/internal/legacytypes/helmv2apib\x06proto3"

var (
	file_chart_proto_rawDescOnce sync.Once
	file_chart_proto_rawDescData []byte
)

func file_chart_proto_rawDescGZIP() []byte {
	file_chart_proto_rawDescOnce.Do(func() {
		file_chart_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chart_proto_rawDesc), len(file_chart_proto_rawDesc)))
	})
	return file_chart_proto_rawDescData
}

var file_chart_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_chart_proto_goTypes = []any{
	(*Chart)(nil),     // 0: legacytypes.helmv2api.Chart
	(*Metadata)(nil),  // 1: legacytypes.helmv2api.Metadata
	(*Template)(nil),  // 2: legacytypes.helmv2api.Template
	(*Config)(nil),    // 3: legacytypes.helmv2api.Config
	(*anypb.Any)(nil), // 4: google.protobuf.Any
}
var file_chart_proto_depIdxs = []int32{
	1, // 0: legacytypes.helmv2api.Chart.metadata:type_name -> legacytypes.helmv2api.Metadata
	2, // 1: legacytypes.helmv2api.Chart.templates:type_name -> legacytypes.helmv2api.Template
	0, // 2: legacytypes.helmv2api.Chart.dependencies:type_name -> legacytypes.helmv2api.Chart
	3, // 3: legacytypes.helmv2api.Chart.values:type_name -> legacytypes.helmv2api.Config
	4, // 4: legacytypes.helmv2api.Chart.files:type_name -> google.protobuf.Any
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_chart_proto_init() }
func file_chart_proto_init() {
	if File_chart_proto != nil {
		return
	}
	file_config_proto_init()
	file_metadata_proto_init()
	file_template_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chart_proto_rawDesc), len(file_chart_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chart_proto_goTypes,
		DependencyIndexes: file_chart_proto_depIdxs,
		MessageInfos:      file_chart_proto_msgTypes,
	}.Build()
	File_chart_proto = out.File
	file_chart_proto_goTypes = nil
	file_chart_proto_depIdxs = nil
}
