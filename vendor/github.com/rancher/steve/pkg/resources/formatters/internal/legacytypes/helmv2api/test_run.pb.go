// Copyright The Helm Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: test_run.proto

package helmv2api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestRun_Status int32

const (
	TestRun_UNKNOWN TestRun_Status = 0
	TestRun_SUCCESS TestRun_Status = 1
	TestRun_FAILURE TestRun_Status = 2
	TestRun_RUNNING TestRun_Status = 3
)

// Enum value maps for TestRun_Status.
var (
	TestRun_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "SUCCESS",
		2: "FAILURE",
		3: "RUNNING",
	}
	TestRun_Status_value = map[string]int32{
		"UNKNOWN": 0,
		"SUCCESS": 1,
		"FAILURE": 2,
		"RUNNING": 3,
	}
)

func (x TestRun_Status) Enum() *TestRun_Status {
	p := new(TestRun_Status)
	*p = x
	return p
}

func (x TestRun_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestRun_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_test_run_proto_enumTypes[0].Descriptor()
}

func (TestRun_Status) Type() protoreflect.EnumType {
	return &file_test_run_proto_enumTypes[0]
}

func (x TestRun_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestRun_Status.Descriptor instead.
func (TestRun_Status) EnumDescriptor() ([]byte, []int) {
	return file_test_run_proto_rawDescGZIP(), []int{0, 0}
}

type TestRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status        TestRun_Status         `protobuf:"varint,2,opt,name=status,proto3,enum=legacytypes.helmv2api.TestRun_Status" json:"status,omitempty"`
	Info          string                 `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	CompletedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRun) Reset() {
	*x = TestRun{}
	mi := &file_test_run_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRun) ProtoMessage() {}

func (x *TestRun) ProtoReflect() protoreflect.Message {
	mi := &file_test_run_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRun.ProtoReflect.Descriptor instead.
func (*TestRun) Descriptor() ([]byte, []int) {
	return file_test_run_proto_rawDescGZIP(), []int{0}
}

func (x *TestRun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestRun) GetStatus() TestRun_Status {
	if x != nil {
		return x.Status
	}
	return TestRun_UNKNOWN
}

func (x *TestRun) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *TestRun) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *TestRun) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

var File_test_run_proto protoreflect.FileDescriptor

const file_test_run_proto_rawDesc = "" +
	"\n" +
	"\x0etest_run.proto\x12\x15legacytypes.helmv2api\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa8\x02\n" +
	"\aTestRun\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12=\n" +
	"\x06status\x18\x02 \x01(\x0e2%.legacytypes.helmv2api.TestRun.StatusR\x06status\x12\x12\n" +
	"\x04info\x18\x03 \x01(\tR\x04info\x129\n" +
	"\n" +
	"started_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x12=\n" +
	"\fcompleted_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\vcompletedAt\"<\n" +
	"\x06Status\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aSUCCESS\x10\x01\x12\v\n" +
	"\aFAILURE\x10\x02\x12\v\n" +
	"\aRUNNING\x10\x03BRZPgithub.com/rancher/steve/pkg/resources/formatters/internal/legacytypes/helmv2apib\x06proto3"

var (
	file_test_run_proto_rawDescOnce sync.Once
	file_test_run_proto_rawDescData []byte
)

func file_test_run_proto_rawDescGZIP() []byte {
	file_test_run_proto_rawDescOnce.Do(func() {
		file_test_run_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_test_run_proto_rawDesc), len(file_test_run_proto_rawDesc)))
	})
	return file_test_run_proto_rawDescData
}

var file_test_run_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_run_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_test_run_proto_goTypes = []any{
	(TestRun_Status)(0),           // 0: legacytypes.helmv2api.TestRun.Status
	(*TestRun)(nil),               // 1: legacytypes.helmv2api.TestRun
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_test_run_proto_depIdxs = []int32{
	0, // 0: legacytypes.helmv2api.TestRun.status:type_name -> legacytypes.helmv2api.TestRun.Status
	2, // 1: legacytypes.helmv2api.TestRun.started_at:type_name -> google.protobuf.Timestamp
	2, // 2: legacytypes.helmv2api.TestRun.completed_at:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_test_run_proto_init() }
func file_test_run_proto_init() {
	if File_test_run_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_test_run_proto_rawDesc), len(file_test_run_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_run_proto_goTypes,
		DependencyIndexes: file_test_run_proto_depIdxs,
		EnumInfos:         file_test_run_proto_enumTypes,
		MessageInfos:      file_test_run_proto_msgTypes,
	}.Build()
	File_test_run_proto = out.File
	file_test_run_proto_goTypes = nil
	file_test_run_proto_depIdxs = nil
}
