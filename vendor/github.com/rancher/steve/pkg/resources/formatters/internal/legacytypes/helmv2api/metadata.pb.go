// Copyright The Helm Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: metadata.proto

package helmv2api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Metadata_Engine int32

const (
	Metadata_UNKNOWN Metadata_Engine = 0
	Metadata_GOTPL   Metadata_Engine = 1
)

// Enum value maps for Metadata_Engine.
var (
	Metadata_Engine_name = map[int32]string{
		0: "UNKNOWN",
		1: "GOTPL",
	}
	Metadata_Engine_value = map[string]int32{
		"UNKNOWN": 0,
		"GOTPL":   1,
	}
)

func (x Metadata_Engine) Enum() *Metadata_Engine {
	p := new(Metadata_Engine)
	*p = x
	return p
}

func (x Metadata_Engine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metadata_Engine) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_proto_enumTypes[0].Descriptor()
}

func (Metadata_Engine) Type() protoreflect.EnumType {
	return &file_metadata_proto_enumTypes[0]
}

func (x Metadata_Engine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metadata_Engine.Descriptor instead.
func (Metadata_Engine) EnumDescriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{1, 0}
}

// Maintainer describes a Chart maintainer.
type Maintainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is a user name or organization name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Email is an optional email address to contact the named maintainer
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Url is an optional URL to an address for the named maintainer
	Url           string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Maintainer) Reset() {
	*x = Maintainer{}
	mi := &file_metadata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Maintainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maintainer) ProtoMessage() {}

func (x *Maintainer) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maintainer.ProtoReflect.Descriptor instead.
func (*Maintainer) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *Maintainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Maintainer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Maintainer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Metadata for a Chart file. This models the structure of a Chart.yaml file.
//
// Spec: https://k8s.io/helm/blob/master/docs/design/chart_format.md#the-chart-file
type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the chart
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The URL to a relevant project page, git repo, or contact person
	Home string `protobuf:"bytes,2,opt,name=home,proto3" json:"home,omitempty"`
	// Source is the URL to the source code of this chart
	Sources []string `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
	// A SemVer 2 conformant version string of the chart
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// A one-sentence description of the chart
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// A list of string keywords
	Keywords []string `protobuf:"bytes,6,rep,name=keywords,proto3" json:"keywords,omitempty"`
	// A list of name and URL/email address combinations for the maintainer(s)
	Maintainers []*Maintainer `protobuf:"bytes,7,rep,name=maintainers,proto3" json:"maintainers,omitempty"`
	// The name of the template engine to use. Defaults to 'gotpl'.
	Engine string `protobuf:"bytes,8,opt,name=engine,proto3" json:"engine,omitempty"`
	// The URL to an icon file.
	Icon string `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`
	// The API Version of this chart.
	ApiVersion string `protobuf:"bytes,10,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// The condition to check to enable chart
	Condition string `protobuf:"bytes,11,opt,name=condition,proto3" json:"condition,omitempty"`
	// The tags to check to enable chart
	Tags string `protobuf:"bytes,12,opt,name=tags,proto3" json:"tags,omitempty"`
	// The version of the application enclosed inside of this chart.
	AppVersion string `protobuf:"bytes,13,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	// Whether or not this chart is deprecated
	Deprecated bool `protobuf:"varint,14,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// TillerVersion is a SemVer constraints on what version of Tiller is required.
	// See SemVer ranges here: https://github.com/Masterminds/semver#basic-comparisons
	TillerVersion string `protobuf:"bytes,15,opt,name=tillerVersion,proto3" json:"tillerVersion,omitempty"`
	// Annotations are additional mappings uninterpreted by Tiller,
	// made available for inspection by other applications.
	Annotations map[string]string `protobuf:"bytes,16,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// KubeVersion is a SemVer constraint specifying the version of Kubernetes required.
	KubeVersion   string `protobuf:"bytes,17,opt,name=kubeVersion,proto3" json:"kubeVersion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_metadata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetHome() string {
	if x != nil {
		return x.Home
	}
	return ""
}

func (x *Metadata) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Metadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Metadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Metadata) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Metadata) GetMaintainers() []*Maintainer {
	if x != nil {
		return x.Maintainers
	}
	return nil
}

func (x *Metadata) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *Metadata) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Metadata) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Metadata) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *Metadata) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Metadata) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *Metadata) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Metadata) GetTillerVersion() string {
	if x != nil {
		return x.TillerVersion
	}
	return ""
}

func (x *Metadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Metadata) GetKubeVersion() string {
	if x != nil {
		return x.KubeVersion
	}
	return ""
}

var File_metadata_proto protoreflect.FileDescriptor

const file_metadata_proto_rawDesc = "" +
	"\n" +
	"\x0emetadata.proto\x12\x15legacytypes.helmv2api\"H\n" +
	"\n" +
	"Maintainer\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05email\x18\x02 \x01(\tR\x05email\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\"\xa5\x05\n" +
	"\bMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04home\x18\x02 \x01(\tR\x04home\x12\x18\n" +
	"\asources\x18\x03 \x03(\tR\asources\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x1a\n" +
	"\bkeywords\x18\x06 \x03(\tR\bkeywords\x12C\n" +
	"\vmaintainers\x18\a \x03(\v2!.legacytypes.helmv2api.MaintainerR\vmaintainers\x12\x16\n" +
	"\x06engine\x18\b \x01(\tR\x06engine\x12\x12\n" +
	"\x04icon\x18\t \x01(\tR\x04icon\x12\x1e\n" +
	"\n" +
	"apiVersion\x18\n" +
	" \x01(\tR\n" +
	"apiVersion\x12\x1c\n" +
	"\tcondition\x18\v \x01(\tR\tcondition\x12\x12\n" +
	"\x04tags\x18\f \x01(\tR\x04tags\x12\x1e\n" +
	"\n" +
	"appVersion\x18\r \x01(\tR\n" +
	"appVersion\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x0e \x01(\bR\n" +
	"deprecated\x12$\n" +
	"\rtillerVersion\x18\x0f \x01(\tR\rtillerVersion\x12R\n" +
	"\vannotations\x18\x10 \x03(\v20.legacytypes.helmv2api.Metadata.AnnotationsEntryR\vannotations\x12 \n" +
	"\vkubeVersion\x18\x11 \x01(\tR\vkubeVersion\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\" \n" +
	"\x06Engine\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\t\n" +
	"\x05GOTPL\x10\x01BRZPgithub.com/rancher/steve/pkg/resources/formatters/internal/legacytypes/helmv2apib\x06proto3"

var (
	file_metadata_proto_rawDescOnce sync.Once
	file_metadata_proto_rawDescData []byte
)

func file_metadata_proto_rawDescGZIP() []byte {
	file_metadata_proto_rawDescOnce.Do(func() {
		file_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metadata_proto_rawDesc), len(file_metadata_proto_rawDesc)))
	})
	return file_metadata_proto_rawDescData
}

var file_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_metadata_proto_goTypes = []any{
	(Metadata_Engine)(0), // 0: legacytypes.helmv2api.Metadata.Engine
	(*Maintainer)(nil),   // 1: legacytypes.helmv2api.Maintainer
	(*Metadata)(nil),     // 2: legacytypes.helmv2api.Metadata
	nil,                  // 3: legacytypes.helmv2api.Metadata.AnnotationsEntry
}
var file_metadata_proto_depIdxs = []int32{
	1, // 0: legacytypes.helmv2api.Metadata.maintainers:type_name -> legacytypes.helmv2api.Maintainer
	3, // 1: legacytypes.helmv2api.Metadata.annotations:type_name -> legacytypes.helmv2api.Metadata.AnnotationsEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_metadata_proto_init() }
func file_metadata_proto_init() {
	if File_metadata_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metadata_proto_rawDesc), len(file_metadata_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metadata_proto_goTypes,
		DependencyIndexes: file_metadata_proto_depIdxs,
		EnumInfos:         file_metadata_proto_enumTypes,
		MessageInfos:      file_metadata_proto_msgTypes,
	}.Build()
	File_metadata_proto = out.File
	file_metadata_proto_goTypes = nil
	file_metadata_proto_depIdxs = nil
}
