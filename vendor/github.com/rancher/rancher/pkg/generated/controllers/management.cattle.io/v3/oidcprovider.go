/*
Copyright 2022 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type OIDCProviderHandler func(string, *v3.OIDCProvider) (*v3.OIDCProvider, error)

type OIDCProviderController interface {
	generic.ControllerMeta
	OIDCProviderClient

	OnChange(ctx context.Context, name string, sync OIDCProviderHandler)
	OnRemove(ctx context.Context, name string, sync OIDCProviderHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() OIDCProviderCache
}

type OIDCProviderClient interface {
	Create(*v3.OIDCProvider) (*v3.OIDCProvider, error)
	Update(*v3.OIDCProvider) (*v3.OIDCProvider, error)

	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v3.OIDCProvider, error)
	List(opts metav1.ListOptions) (*v3.OIDCProviderList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.OIDCProvider, err error)
}

type OIDCProviderCache interface {
	Get(name string) (*v3.OIDCProvider, error)
	List(selector labels.Selector) ([]*v3.OIDCProvider, error)

	AddIndexer(indexName string, indexer OIDCProviderIndexer)
	GetByIndex(indexName, key string) ([]*v3.OIDCProvider, error)
}

type OIDCProviderIndexer func(obj *v3.OIDCProvider) ([]string, error)

type oIDCProviderController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewOIDCProviderController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) OIDCProviderController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &oIDCProviderController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromOIDCProviderHandlerToHandler(sync OIDCProviderHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v3.OIDCProvider
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v3.OIDCProvider))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *oIDCProviderController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v3.OIDCProvider))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateOIDCProviderDeepCopyOnChange(client OIDCProviderClient, obj *v3.OIDCProvider, handler func(obj *v3.OIDCProvider) (*v3.OIDCProvider, error)) (*v3.OIDCProvider, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *oIDCProviderController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *oIDCProviderController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *oIDCProviderController) OnChange(ctx context.Context, name string, sync OIDCProviderHandler) {
	c.AddGenericHandler(ctx, name, FromOIDCProviderHandlerToHandler(sync))
}

func (c *oIDCProviderController) OnRemove(ctx context.Context, name string, sync OIDCProviderHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromOIDCProviderHandlerToHandler(sync)))
}

func (c *oIDCProviderController) Enqueue(name string) {
	c.controller.Enqueue("", name)
}

func (c *oIDCProviderController) EnqueueAfter(name string, duration time.Duration) {
	c.controller.EnqueueAfter("", name, duration)
}

func (c *oIDCProviderController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *oIDCProviderController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *oIDCProviderController) Cache() OIDCProviderCache {
	return &oIDCProviderCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *oIDCProviderController) Create(obj *v3.OIDCProvider) (*v3.OIDCProvider, error) {
	result := &v3.OIDCProvider{}
	return result, c.client.Create(context.TODO(), "", obj, result, metav1.CreateOptions{})
}

func (c *oIDCProviderController) Update(obj *v3.OIDCProvider) (*v3.OIDCProvider, error) {
	result := &v3.OIDCProvider{}
	return result, c.client.Update(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *oIDCProviderController) Delete(name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), "", name, *options)
}

func (c *oIDCProviderController) Get(name string, options metav1.GetOptions) (*v3.OIDCProvider, error) {
	result := &v3.OIDCProvider{}
	return result, c.client.Get(context.TODO(), "", name, result, options)
}

func (c *oIDCProviderController) List(opts metav1.ListOptions) (*v3.OIDCProviderList, error) {
	result := &v3.OIDCProviderList{}
	return result, c.client.List(context.TODO(), "", result, opts)
}

func (c *oIDCProviderController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), "", opts)
}

func (c *oIDCProviderController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v3.OIDCProvider, error) {
	result := &v3.OIDCProvider{}
	return result, c.client.Patch(context.TODO(), "", name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type oIDCProviderCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *oIDCProviderCache) Get(name string) (*v3.OIDCProvider, error) {
	obj, exists, err := c.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v3.OIDCProvider), nil
}

func (c *oIDCProviderCache) List(selector labels.Selector) (ret []*v3.OIDCProvider, err error) {

	err = cache.ListAll(c.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.OIDCProvider))
	})

	return ret, err
}

func (c *oIDCProviderCache) AddIndexer(indexName string, indexer OIDCProviderIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v3.OIDCProvider))
		},
	}))
}

func (c *oIDCProviderCache) GetByIndex(indexName, key string) (result []*v3.OIDCProvider, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v3.OIDCProvider, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v3.OIDCProvider))
	}
	return result, nil
}
