/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EngineImageLister helps list EngineImages.
type EngineImageLister interface {
	// List lists all EngineImages in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.EngineImage, err error)
	// EngineImages returns an object that can list and get EngineImages.
	EngineImages(namespace string) EngineImageNamespaceLister
	EngineImageListerExpansion
}

// engineImageLister implements the EngineImageLister interface.
type engineImageLister struct {
	indexer cache.Indexer
}

// NewEngineImageLister returns a new EngineImageLister.
func NewEngineImageLister(indexer cache.Indexer) EngineImageLister {
	return &engineImageLister{indexer: indexer}
}

// List lists all EngineImages in the indexer.
func (s *engineImageLister) List(selector labels.Selector) (ret []*v1beta1.EngineImage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.EngineImage))
	})
	return ret, err
}

// EngineImages returns an object that can list and get EngineImages.
func (s *engineImageLister) EngineImages(namespace string) EngineImageNamespaceLister {
	return engineImageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EngineImageNamespaceLister helps list and get EngineImages.
type EngineImageNamespaceLister interface {
	// List lists all EngineImages in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.EngineImage, err error)
	// Get retrieves the EngineImage from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.EngineImage, error)
	EngineImageNamespaceListerExpansion
}

// engineImageNamespaceLister implements the EngineImageNamespaceLister
// interface.
type engineImageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EngineImages in the indexer for a given namespace.
func (s engineImageNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.EngineImage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.EngineImage))
	})
	return ret, err
}

// Get retrieves the EngineImage from the indexer for a given namespace and name.
func (s engineImageNamespaceLister) Get(name string) (*v1beta1.EngineImage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("engineimage"), name)
	}
	return obj.(*v1beta1.EngineImage), nil
}
