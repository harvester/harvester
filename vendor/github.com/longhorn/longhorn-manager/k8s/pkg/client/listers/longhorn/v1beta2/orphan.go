/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OrphanLister helps list Orphans.
type OrphanLister interface {
	// List lists all Orphans in the indexer.
	List(selector labels.Selector) (ret []*v1beta2.Orphan, err error)
	// Orphans returns an object that can list and get Orphans.
	Orphans(namespace string) OrphanNamespaceLister
	OrphanListerExpansion
}

// orphanLister implements the OrphanLister interface.
type orphanLister struct {
	indexer cache.Indexer
}

// NewOrphanLister returns a new OrphanLister.
func NewOrphanLister(indexer cache.Indexer) OrphanLister {
	return &orphanLister{indexer: indexer}
}

// List lists all Orphans in the indexer.
func (s *orphanLister) List(selector labels.Selector) (ret []*v1beta2.Orphan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.Orphan))
	})
	return ret, err
}

// Orphans returns an object that can list and get Orphans.
func (s *orphanLister) Orphans(namespace string) OrphanNamespaceLister {
	return orphanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OrphanNamespaceLister helps list and get Orphans.
type OrphanNamespaceLister interface {
	// List lists all Orphans in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta2.Orphan, err error)
	// Get retrieves the Orphan from the indexer for a given namespace and name.
	Get(name string) (*v1beta2.Orphan, error)
	OrphanNamespaceListerExpansion
}

// orphanNamespaceLister implements the OrphanNamespaceLister
// interface.
type orphanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Orphans in the indexer for a given namespace.
func (s orphanNamespaceLister) List(selector labels.Selector) (ret []*v1beta2.Orphan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.Orphan))
	})
	return ret, err
}

// Get retrieves the Orphan from the indexer for a given namespace and name.
func (s orphanNamespaceLister) Get(name string) (*v1beta2.Orphan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta2.Resource("orphan"), name)
	}
	return obj.(*v1beta2.Orphan), nil
}
