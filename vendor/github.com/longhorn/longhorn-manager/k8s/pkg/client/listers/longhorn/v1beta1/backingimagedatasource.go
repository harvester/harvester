/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackingImageDataSourceLister helps list BackingImageDataSources.
type BackingImageDataSourceLister interface {
	// List lists all BackingImageDataSources in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.BackingImageDataSource, err error)
	// BackingImageDataSources returns an object that can list and get BackingImageDataSources.
	BackingImageDataSources(namespace string) BackingImageDataSourceNamespaceLister
	BackingImageDataSourceListerExpansion
}

// backingImageDataSourceLister implements the BackingImageDataSourceLister interface.
type backingImageDataSourceLister struct {
	indexer cache.Indexer
}

// NewBackingImageDataSourceLister returns a new BackingImageDataSourceLister.
func NewBackingImageDataSourceLister(indexer cache.Indexer) BackingImageDataSourceLister {
	return &backingImageDataSourceLister{indexer: indexer}
}

// List lists all BackingImageDataSources in the indexer.
func (s *backingImageDataSourceLister) List(selector labels.Selector) (ret []*v1beta1.BackingImageDataSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.BackingImageDataSource))
	})
	return ret, err
}

// BackingImageDataSources returns an object that can list and get BackingImageDataSources.
func (s *backingImageDataSourceLister) BackingImageDataSources(namespace string) BackingImageDataSourceNamespaceLister {
	return backingImageDataSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackingImageDataSourceNamespaceLister helps list and get BackingImageDataSources.
type BackingImageDataSourceNamespaceLister interface {
	// List lists all BackingImageDataSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.BackingImageDataSource, err error)
	// Get retrieves the BackingImageDataSource from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.BackingImageDataSource, error)
	BackingImageDataSourceNamespaceListerExpansion
}

// backingImageDataSourceNamespaceLister implements the BackingImageDataSourceNamespaceLister
// interface.
type backingImageDataSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackingImageDataSources in the indexer for a given namespace.
func (s backingImageDataSourceNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.BackingImageDataSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.BackingImageDataSource))
	})
	return ret, err
}

// Get retrieves the BackingImageDataSource from the indexer for a given namespace and name.
func (s backingImageDataSourceNamespaceLister) Get(name string) (*v1beta1.BackingImageDataSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("backingimagedatasource"), name)
	}
	return obj.(*v1beta1.BackingImageDataSource), nil
}
