// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: bimrpc/bimrpc.proto

package bimrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BackingImageManagerService_Delete_FullMethodName          = "/bimrpc.BackingImageManagerService/Delete"
	BackingImageManagerService_Get_FullMethodName             = "/bimrpc.BackingImageManagerService/Get"
	BackingImageManagerService_List_FullMethodName            = "/bimrpc.BackingImageManagerService/List"
	BackingImageManagerService_VersionGet_FullMethodName      = "/bimrpc.BackingImageManagerService/VersionGet"
	BackingImageManagerService_Sync_FullMethodName            = "/bimrpc.BackingImageManagerService/Sync"
	BackingImageManagerService_Send_FullMethodName            = "/bimrpc.BackingImageManagerService/Send"
	BackingImageManagerService_Fetch_FullMethodName           = "/bimrpc.BackingImageManagerService/Fetch"
	BackingImageManagerService_PrepareDownload_FullMethodName = "/bimrpc.BackingImageManagerService/PrepareDownload"
	BackingImageManagerService_BackupCreate_FullMethodName    = "/bimrpc.BackingImageManagerService/BackupCreate"
	BackingImageManagerService_BackupStatus_FullMethodName    = "/bimrpc.BackingImageManagerService/BackupStatus"
	BackingImageManagerService_Watch_FullMethodName           = "/bimrpc.BackingImageManagerService/Watch"
)

// BackingImageManagerServiceClient is the client API for BackingImageManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackingImageManagerServiceClient interface {
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*BackingImageResponse, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	VersionGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*BackingImageResponse, error)
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*BackingImageResponse, error)
	PrepareDownload(ctx context.Context, in *PrepareDownloadRequest, opts ...grpc.CallOption) (*PrepareDownloadResponse, error)
	BackupCreate(ctx context.Context, in *BackupCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BackupStatus(ctx context.Context, in *BackupStatusRequest, opts ...grpc.CallOption) (*BackupStatusResponse, error)
	Watch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (BackingImageManagerService_WatchClient, error)
}

type backingImageManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackingImageManagerServiceClient(cc grpc.ClientConnInterface) BackingImageManagerServiceClient {
	return &backingImageManagerServiceClient{cc}
}

func (c *backingImageManagerServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BackingImageManagerService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backingImageManagerServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*BackingImageResponse, error) {
	out := new(BackingImageResponse)
	err := c.cc.Invoke(ctx, BackingImageManagerService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backingImageManagerServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, BackingImageManagerService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backingImageManagerServiceClient) VersionGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, BackingImageManagerService_VersionGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backingImageManagerServiceClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*BackingImageResponse, error) {
	out := new(BackingImageResponse)
	err := c.cc.Invoke(ctx, BackingImageManagerService_Sync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backingImageManagerServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BackingImageManagerService_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backingImageManagerServiceClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*BackingImageResponse, error) {
	out := new(BackingImageResponse)
	err := c.cc.Invoke(ctx, BackingImageManagerService_Fetch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backingImageManagerServiceClient) PrepareDownload(ctx context.Context, in *PrepareDownloadRequest, opts ...grpc.CallOption) (*PrepareDownloadResponse, error) {
	out := new(PrepareDownloadResponse)
	err := c.cc.Invoke(ctx, BackingImageManagerService_PrepareDownload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backingImageManagerServiceClient) BackupCreate(ctx context.Context, in *BackupCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BackingImageManagerService_BackupCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backingImageManagerServiceClient) BackupStatus(ctx context.Context, in *BackupStatusRequest, opts ...grpc.CallOption) (*BackupStatusResponse, error) {
	out := new(BackupStatusResponse)
	err := c.cc.Invoke(ctx, BackingImageManagerService_BackupStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backingImageManagerServiceClient) Watch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (BackingImageManagerService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &BackingImageManagerService_ServiceDesc.Streams[0], BackingImageManagerService_Watch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &backingImageManagerServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BackingImageManagerService_WatchClient interface {
	Recv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type backingImageManagerServiceWatchClient struct {
	grpc.ClientStream
}

func (x *backingImageManagerServiceWatchClient) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackingImageManagerServiceServer is the server API for BackingImageManagerService service.
// All implementations must embed UnimplementedBackingImageManagerServiceServer
// for forward compatibility
type BackingImageManagerServiceServer interface {
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	Get(context.Context, *GetRequest) (*BackingImageResponse, error)
	List(context.Context, *emptypb.Empty) (*ListResponse, error)
	VersionGet(context.Context, *emptypb.Empty) (*VersionResponse, error)
	Sync(context.Context, *SyncRequest) (*BackingImageResponse, error)
	Send(context.Context, *SendRequest) (*emptypb.Empty, error)
	Fetch(context.Context, *FetchRequest) (*BackingImageResponse, error)
	PrepareDownload(context.Context, *PrepareDownloadRequest) (*PrepareDownloadResponse, error)
	BackupCreate(context.Context, *BackupCreateRequest) (*emptypb.Empty, error)
	BackupStatus(context.Context, *BackupStatusRequest) (*BackupStatusResponse, error)
	Watch(*emptypb.Empty, BackingImageManagerService_WatchServer) error
	mustEmbedUnimplementedBackingImageManagerServiceServer()
}

// UnimplementedBackingImageManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackingImageManagerServiceServer struct {
}

func (UnimplementedBackingImageManagerServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBackingImageManagerServiceServer) Get(context.Context, *GetRequest) (*BackingImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBackingImageManagerServiceServer) List(context.Context, *emptypb.Empty) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBackingImageManagerServiceServer) VersionGet(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VersionGet not implemented")
}
func (UnimplementedBackingImageManagerServiceServer) Sync(context.Context, *SyncRequest) (*BackingImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedBackingImageManagerServiceServer) Send(context.Context, *SendRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedBackingImageManagerServiceServer) Fetch(context.Context, *FetchRequest) (*BackingImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedBackingImageManagerServiceServer) PrepareDownload(context.Context, *PrepareDownloadRequest) (*PrepareDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareDownload not implemented")
}
func (UnimplementedBackingImageManagerServiceServer) BackupCreate(context.Context, *BackupCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupCreate not implemented")
}
func (UnimplementedBackingImageManagerServiceServer) BackupStatus(context.Context, *BackupStatusRequest) (*BackupStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupStatus not implemented")
}
func (UnimplementedBackingImageManagerServiceServer) Watch(*emptypb.Empty, BackingImageManagerService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedBackingImageManagerServiceServer) mustEmbedUnimplementedBackingImageManagerServiceServer() {
}

// UnsafeBackingImageManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackingImageManagerServiceServer will
// result in compilation errors.
type UnsafeBackingImageManagerServiceServer interface {
	mustEmbedUnimplementedBackingImageManagerServiceServer()
}

func RegisterBackingImageManagerServiceServer(s grpc.ServiceRegistrar, srv BackingImageManagerServiceServer) {
	s.RegisterService(&BackingImageManagerService_ServiceDesc, srv)
}

func _BackingImageManagerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackingImageManagerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackingImageManagerService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackingImageManagerServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackingImageManagerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackingImageManagerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackingImageManagerService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackingImageManagerServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackingImageManagerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackingImageManagerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackingImageManagerService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackingImageManagerServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackingImageManagerService_VersionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackingImageManagerServiceServer).VersionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackingImageManagerService_VersionGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackingImageManagerServiceServer).VersionGet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackingImageManagerService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackingImageManagerServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackingImageManagerService_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackingImageManagerServiceServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackingImageManagerService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackingImageManagerServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackingImageManagerService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackingImageManagerServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackingImageManagerService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackingImageManagerServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackingImageManagerService_Fetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackingImageManagerServiceServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackingImageManagerService_PrepareDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackingImageManagerServiceServer).PrepareDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackingImageManagerService_PrepareDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackingImageManagerServiceServer).PrepareDownload(ctx, req.(*PrepareDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackingImageManagerService_BackupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackingImageManagerServiceServer).BackupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackingImageManagerService_BackupCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackingImageManagerServiceServer).BackupCreate(ctx, req.(*BackupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackingImageManagerService_BackupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackingImageManagerServiceServer).BackupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackingImageManagerService_BackupStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackingImageManagerServiceServer).BackupStatus(ctx, req.(*BackupStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackingImageManagerService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackingImageManagerServiceServer).Watch(m, &backingImageManagerServiceWatchServer{stream})
}

type BackingImageManagerService_WatchServer interface {
	Send(*emptypb.Empty) error
	grpc.ServerStream
}

type backingImageManagerServiceWatchServer struct {
	grpc.ServerStream
}

func (x *backingImageManagerServiceWatchServer) Send(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

// BackingImageManagerService_ServiceDesc is the grpc.ServiceDesc for BackingImageManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackingImageManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bimrpc.BackingImageManagerService",
	HandlerType: (*BackingImageManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _BackingImageManagerService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BackingImageManagerService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _BackingImageManagerService_List_Handler,
		},
		{
			MethodName: "VersionGet",
			Handler:    _BackingImageManagerService_VersionGet_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _BackingImageManagerService_Sync_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _BackingImageManagerService_Send_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _BackingImageManagerService_Fetch_Handler,
		},
		{
			MethodName: "PrepareDownload",
			Handler:    _BackingImageManagerService_PrepareDownload_Handler,
		},
		{
			MethodName: "BackupCreate",
			Handler:    _BackingImageManagerService_BackupCreate_Handler,
		},
		{
			MethodName: "BackupStatus",
			Handler:    _BackingImageManagerService_BackupStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _BackingImageManagerService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bimrpc/bimrpc.proto",
}
