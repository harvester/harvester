// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: imrpc/proxy.proto

package imrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProxyEngineService_ServerVersionGet_FullMethodName                   = "/imrpc.ProxyEngineService/ServerVersionGet"
	ProxyEngineService_VolumeGet_FullMethodName                          = "/imrpc.ProxyEngineService/VolumeGet"
	ProxyEngineService_VolumeExpand_FullMethodName                       = "/imrpc.ProxyEngineService/VolumeExpand"
	ProxyEngineService_VolumeFrontendStart_FullMethodName                = "/imrpc.ProxyEngineService/VolumeFrontendStart"
	ProxyEngineService_VolumeFrontendShutdown_FullMethodName             = "/imrpc.ProxyEngineService/VolumeFrontendShutdown"
	ProxyEngineService_VolumeUnmapMarkSnapChainRemovedSet_FullMethodName = "/imrpc.ProxyEngineService/VolumeUnmapMarkSnapChainRemovedSet"
	ProxyEngineService_VolumeSnapshotMaxCountSet_FullMethodName          = "/imrpc.ProxyEngineService/VolumeSnapshotMaxCountSet"
	ProxyEngineService_VolumeSnapshotMaxSizeSet_FullMethodName           = "/imrpc.ProxyEngineService/VolumeSnapshotMaxSizeSet"
	ProxyEngineService_VolumeSnapshot_FullMethodName                     = "/imrpc.ProxyEngineService/VolumeSnapshot"
	ProxyEngineService_SnapshotList_FullMethodName                       = "/imrpc.ProxyEngineService/SnapshotList"
	ProxyEngineService_SnapshotRevert_FullMethodName                     = "/imrpc.ProxyEngineService/SnapshotRevert"
	ProxyEngineService_SnapshotPurge_FullMethodName                      = "/imrpc.ProxyEngineService/SnapshotPurge"
	ProxyEngineService_SnapshotPurgeStatus_FullMethodName                = "/imrpc.ProxyEngineService/SnapshotPurgeStatus"
	ProxyEngineService_SnapshotClone_FullMethodName                      = "/imrpc.ProxyEngineService/SnapshotClone"
	ProxyEngineService_SnapshotCloneStatus_FullMethodName                = "/imrpc.ProxyEngineService/SnapshotCloneStatus"
	ProxyEngineService_SnapshotRemove_FullMethodName                     = "/imrpc.ProxyEngineService/SnapshotRemove"
	ProxyEngineService_SnapshotHash_FullMethodName                       = "/imrpc.ProxyEngineService/SnapshotHash"
	ProxyEngineService_SnapshotHashStatus_FullMethodName                 = "/imrpc.ProxyEngineService/SnapshotHashStatus"
	ProxyEngineService_SnapshotBackup_FullMethodName                     = "/imrpc.ProxyEngineService/SnapshotBackup"
	ProxyEngineService_SnapshotBackupStatus_FullMethodName               = "/imrpc.ProxyEngineService/SnapshotBackupStatus"
	ProxyEngineService_BackupRestore_FullMethodName                      = "/imrpc.ProxyEngineService/BackupRestore"
	ProxyEngineService_BackupRestoreStatus_FullMethodName                = "/imrpc.ProxyEngineService/BackupRestoreStatus"
	ProxyEngineService_BackupRestoreFinish_FullMethodName                = "/imrpc.ProxyEngineService/BackupRestoreFinish"
	ProxyEngineService_CleanupBackupMountPoints_FullMethodName           = "/imrpc.ProxyEngineService/CleanupBackupMountPoints"
	ProxyEngineService_ReplicaAdd_FullMethodName                         = "/imrpc.ProxyEngineService/ReplicaAdd"
	ProxyEngineService_ReplicaList_FullMethodName                        = "/imrpc.ProxyEngineService/ReplicaList"
	ProxyEngineService_ReplicaRebuildingStatus_FullMethodName            = "/imrpc.ProxyEngineService/ReplicaRebuildingStatus"
	ProxyEngineService_ReplicaVerifyRebuild_FullMethodName               = "/imrpc.ProxyEngineService/ReplicaVerifyRebuild"
	ProxyEngineService_ReplicaRemove_FullMethodName                      = "/imrpc.ProxyEngineService/ReplicaRemove"
	ProxyEngineService_ReplicaModeUpdate_FullMethodName                  = "/imrpc.ProxyEngineService/ReplicaModeUpdate"
	ProxyEngineService_MetricsGet_FullMethodName                         = "/imrpc.ProxyEngineService/MetricsGet"
	ProxyEngineService_RemountReadOnlyVolume_FullMethodName              = "/imrpc.ProxyEngineService/RemountReadOnlyVolume"
)

// ProxyEngineServiceClient is the client API for ProxyEngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyEngineServiceClient interface {
	ServerVersionGet(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineVersionProxyResponse, error)
	VolumeGet(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineVolumeGetProxyResponse, error)
	VolumeExpand(ctx context.Context, in *EngineVolumeExpandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VolumeFrontendStart(ctx context.Context, in *EngineVolumeFrontendStartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VolumeFrontendShutdown(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VolumeUnmapMarkSnapChainRemovedSet(ctx context.Context, in *EngineVolumeUnmapMarkSnapChainRemovedSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VolumeSnapshotMaxCountSet(ctx context.Context, in *EngineVolumeSnapshotMaxCountSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VolumeSnapshotMaxSizeSet(ctx context.Context, in *EngineVolumeSnapshotMaxSizeSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VolumeSnapshot(ctx context.Context, in *EngineVolumeSnapshotRequest, opts ...grpc.CallOption) (*EngineVolumeSnapshotProxyResponse, error)
	SnapshotList(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineSnapshotListProxyResponse, error)
	SnapshotRevert(ctx context.Context, in *EngineSnapshotRevertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SnapshotPurge(ctx context.Context, in *EngineSnapshotPurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SnapshotPurgeStatus(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineSnapshotPurgeStatusProxyResponse, error)
	SnapshotClone(ctx context.Context, in *EngineSnapshotCloneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SnapshotCloneStatus(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineSnapshotCloneStatusProxyResponse, error)
	SnapshotRemove(ctx context.Context, in *EngineSnapshotRemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SnapshotHash(ctx context.Context, in *EngineSnapshotHashRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SnapshotHashStatus(ctx context.Context, in *EngineSnapshotHashStatusRequest, opts ...grpc.CallOption) (*EngineSnapshotHashStatusProxyResponse, error)
	SnapshotBackup(ctx context.Context, in *EngineSnapshotBackupRequest, opts ...grpc.CallOption) (*EngineSnapshotBackupProxyResponse, error)
	SnapshotBackupStatus(ctx context.Context, in *EngineSnapshotBackupStatusRequest, opts ...grpc.CallOption) (*EngineSnapshotBackupStatusProxyResponse, error)
	BackupRestore(ctx context.Context, in *EngineBackupRestoreRequest, opts ...grpc.CallOption) (*EngineBackupRestoreProxyResponse, error)
	BackupRestoreStatus(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineBackupRestoreStatusProxyResponse, error)
	BackupRestoreFinish(ctx context.Context, in *EngineBackupRestoreFinishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CleanupBackupMountPoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReplicaAdd(ctx context.Context, in *EngineReplicaAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReplicaList(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineReplicaListProxyResponse, error)
	ReplicaRebuildingStatus(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineReplicaRebuildStatusProxyResponse, error)
	ReplicaVerifyRebuild(ctx context.Context, in *EngineReplicaVerifyRebuildRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReplicaRemove(ctx context.Context, in *EngineReplicaRemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReplicaModeUpdate(ctx context.Context, in *EngineReplicaModeUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MetricsGet(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineMetricsGetProxyResponse, error)
	RemountReadOnlyVolume(ctx context.Context, in *RemountVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type proxyEngineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyEngineServiceClient(cc grpc.ClientConnInterface) ProxyEngineServiceClient {
	return &proxyEngineServiceClient{cc}
}

func (c *proxyEngineServiceClient) ServerVersionGet(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineVersionProxyResponse, error) {
	out := new(EngineVersionProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_ServerVersionGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) VolumeGet(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineVolumeGetProxyResponse, error) {
	out := new(EngineVolumeGetProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_VolumeGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) VolumeExpand(ctx context.Context, in *EngineVolumeExpandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_VolumeExpand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) VolumeFrontendStart(ctx context.Context, in *EngineVolumeFrontendStartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_VolumeFrontendStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) VolumeFrontendShutdown(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_VolumeFrontendShutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) VolumeUnmapMarkSnapChainRemovedSet(ctx context.Context, in *EngineVolumeUnmapMarkSnapChainRemovedSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_VolumeUnmapMarkSnapChainRemovedSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) VolumeSnapshotMaxCountSet(ctx context.Context, in *EngineVolumeSnapshotMaxCountSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_VolumeSnapshotMaxCountSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) VolumeSnapshotMaxSizeSet(ctx context.Context, in *EngineVolumeSnapshotMaxSizeSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_VolumeSnapshotMaxSizeSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) VolumeSnapshot(ctx context.Context, in *EngineVolumeSnapshotRequest, opts ...grpc.CallOption) (*EngineVolumeSnapshotProxyResponse, error) {
	out := new(EngineVolumeSnapshotProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_VolumeSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) SnapshotList(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineSnapshotListProxyResponse, error) {
	out := new(EngineSnapshotListProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_SnapshotList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) SnapshotRevert(ctx context.Context, in *EngineSnapshotRevertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_SnapshotRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) SnapshotPurge(ctx context.Context, in *EngineSnapshotPurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_SnapshotPurge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) SnapshotPurgeStatus(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineSnapshotPurgeStatusProxyResponse, error) {
	out := new(EngineSnapshotPurgeStatusProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_SnapshotPurgeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) SnapshotClone(ctx context.Context, in *EngineSnapshotCloneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_SnapshotClone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) SnapshotCloneStatus(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineSnapshotCloneStatusProxyResponse, error) {
	out := new(EngineSnapshotCloneStatusProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_SnapshotCloneStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) SnapshotRemove(ctx context.Context, in *EngineSnapshotRemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_SnapshotRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) SnapshotHash(ctx context.Context, in *EngineSnapshotHashRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_SnapshotHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) SnapshotHashStatus(ctx context.Context, in *EngineSnapshotHashStatusRequest, opts ...grpc.CallOption) (*EngineSnapshotHashStatusProxyResponse, error) {
	out := new(EngineSnapshotHashStatusProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_SnapshotHashStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) SnapshotBackup(ctx context.Context, in *EngineSnapshotBackupRequest, opts ...grpc.CallOption) (*EngineSnapshotBackupProxyResponse, error) {
	out := new(EngineSnapshotBackupProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_SnapshotBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) SnapshotBackupStatus(ctx context.Context, in *EngineSnapshotBackupStatusRequest, opts ...grpc.CallOption) (*EngineSnapshotBackupStatusProxyResponse, error) {
	out := new(EngineSnapshotBackupStatusProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_SnapshotBackupStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) BackupRestore(ctx context.Context, in *EngineBackupRestoreRequest, opts ...grpc.CallOption) (*EngineBackupRestoreProxyResponse, error) {
	out := new(EngineBackupRestoreProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_BackupRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) BackupRestoreStatus(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineBackupRestoreStatusProxyResponse, error) {
	out := new(EngineBackupRestoreStatusProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_BackupRestoreStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) BackupRestoreFinish(ctx context.Context, in *EngineBackupRestoreFinishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_BackupRestoreFinish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) CleanupBackupMountPoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_CleanupBackupMountPoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) ReplicaAdd(ctx context.Context, in *EngineReplicaAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_ReplicaAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) ReplicaList(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineReplicaListProxyResponse, error) {
	out := new(EngineReplicaListProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_ReplicaList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) ReplicaRebuildingStatus(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineReplicaRebuildStatusProxyResponse, error) {
	out := new(EngineReplicaRebuildStatusProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_ReplicaRebuildingStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) ReplicaVerifyRebuild(ctx context.Context, in *EngineReplicaVerifyRebuildRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_ReplicaVerifyRebuild_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) ReplicaRemove(ctx context.Context, in *EngineReplicaRemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_ReplicaRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) ReplicaModeUpdate(ctx context.Context, in *EngineReplicaModeUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_ReplicaModeUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) MetricsGet(ctx context.Context, in *ProxyEngineRequest, opts ...grpc.CallOption) (*EngineMetricsGetProxyResponse, error) {
	out := new(EngineMetricsGetProxyResponse)
	err := c.cc.Invoke(ctx, ProxyEngineService_MetricsGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyEngineServiceClient) RemountReadOnlyVolume(ctx context.Context, in *RemountVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyEngineService_RemountReadOnlyVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyEngineServiceServer is the server API for ProxyEngineService service.
// All implementations must embed UnimplementedProxyEngineServiceServer
// for forward compatibility
type ProxyEngineServiceServer interface {
	ServerVersionGet(context.Context, *ProxyEngineRequest) (*EngineVersionProxyResponse, error)
	VolumeGet(context.Context, *ProxyEngineRequest) (*EngineVolumeGetProxyResponse, error)
	VolumeExpand(context.Context, *EngineVolumeExpandRequest) (*emptypb.Empty, error)
	VolumeFrontendStart(context.Context, *EngineVolumeFrontendStartRequest) (*emptypb.Empty, error)
	VolumeFrontendShutdown(context.Context, *ProxyEngineRequest) (*emptypb.Empty, error)
	VolumeUnmapMarkSnapChainRemovedSet(context.Context, *EngineVolumeUnmapMarkSnapChainRemovedSetRequest) (*emptypb.Empty, error)
	VolumeSnapshotMaxCountSet(context.Context, *EngineVolumeSnapshotMaxCountSetRequest) (*emptypb.Empty, error)
	VolumeSnapshotMaxSizeSet(context.Context, *EngineVolumeSnapshotMaxSizeSetRequest) (*emptypb.Empty, error)
	VolumeSnapshot(context.Context, *EngineVolumeSnapshotRequest) (*EngineVolumeSnapshotProxyResponse, error)
	SnapshotList(context.Context, *ProxyEngineRequest) (*EngineSnapshotListProxyResponse, error)
	SnapshotRevert(context.Context, *EngineSnapshotRevertRequest) (*emptypb.Empty, error)
	SnapshotPurge(context.Context, *EngineSnapshotPurgeRequest) (*emptypb.Empty, error)
	SnapshotPurgeStatus(context.Context, *ProxyEngineRequest) (*EngineSnapshotPurgeStatusProxyResponse, error)
	SnapshotClone(context.Context, *EngineSnapshotCloneRequest) (*emptypb.Empty, error)
	SnapshotCloneStatus(context.Context, *ProxyEngineRequest) (*EngineSnapshotCloneStatusProxyResponse, error)
	SnapshotRemove(context.Context, *EngineSnapshotRemoveRequest) (*emptypb.Empty, error)
	SnapshotHash(context.Context, *EngineSnapshotHashRequest) (*emptypb.Empty, error)
	SnapshotHashStatus(context.Context, *EngineSnapshotHashStatusRequest) (*EngineSnapshotHashStatusProxyResponse, error)
	SnapshotBackup(context.Context, *EngineSnapshotBackupRequest) (*EngineSnapshotBackupProxyResponse, error)
	SnapshotBackupStatus(context.Context, *EngineSnapshotBackupStatusRequest) (*EngineSnapshotBackupStatusProxyResponse, error)
	BackupRestore(context.Context, *EngineBackupRestoreRequest) (*EngineBackupRestoreProxyResponse, error)
	BackupRestoreStatus(context.Context, *ProxyEngineRequest) (*EngineBackupRestoreStatusProxyResponse, error)
	BackupRestoreFinish(context.Context, *EngineBackupRestoreFinishRequest) (*emptypb.Empty, error)
	CleanupBackupMountPoints(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ReplicaAdd(context.Context, *EngineReplicaAddRequest) (*emptypb.Empty, error)
	ReplicaList(context.Context, *ProxyEngineRequest) (*EngineReplicaListProxyResponse, error)
	ReplicaRebuildingStatus(context.Context, *ProxyEngineRequest) (*EngineReplicaRebuildStatusProxyResponse, error)
	ReplicaVerifyRebuild(context.Context, *EngineReplicaVerifyRebuildRequest) (*emptypb.Empty, error)
	ReplicaRemove(context.Context, *EngineReplicaRemoveRequest) (*emptypb.Empty, error)
	ReplicaModeUpdate(context.Context, *EngineReplicaModeUpdateRequest) (*emptypb.Empty, error)
	MetricsGet(context.Context, *ProxyEngineRequest) (*EngineMetricsGetProxyResponse, error)
	RemountReadOnlyVolume(context.Context, *RemountVolumeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedProxyEngineServiceServer()
}

// UnimplementedProxyEngineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProxyEngineServiceServer struct {
}

func (UnimplementedProxyEngineServiceServer) ServerVersionGet(context.Context, *ProxyEngineRequest) (*EngineVersionProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerVersionGet not implemented")
}
func (UnimplementedProxyEngineServiceServer) VolumeGet(context.Context, *ProxyEngineRequest) (*EngineVolumeGetProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeGet not implemented")
}
func (UnimplementedProxyEngineServiceServer) VolumeExpand(context.Context, *EngineVolumeExpandRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeExpand not implemented")
}
func (UnimplementedProxyEngineServiceServer) VolumeFrontendStart(context.Context, *EngineVolumeFrontendStartRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeFrontendStart not implemented")
}
func (UnimplementedProxyEngineServiceServer) VolumeFrontendShutdown(context.Context, *ProxyEngineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeFrontendShutdown not implemented")
}
func (UnimplementedProxyEngineServiceServer) VolumeUnmapMarkSnapChainRemovedSet(context.Context, *EngineVolumeUnmapMarkSnapChainRemovedSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeUnmapMarkSnapChainRemovedSet not implemented")
}
func (UnimplementedProxyEngineServiceServer) VolumeSnapshotMaxCountSet(context.Context, *EngineVolumeSnapshotMaxCountSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeSnapshotMaxCountSet not implemented")
}
func (UnimplementedProxyEngineServiceServer) VolumeSnapshotMaxSizeSet(context.Context, *EngineVolumeSnapshotMaxSizeSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeSnapshotMaxSizeSet not implemented")
}
func (UnimplementedProxyEngineServiceServer) VolumeSnapshot(context.Context, *EngineVolumeSnapshotRequest) (*EngineVolumeSnapshotProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeSnapshot not implemented")
}
func (UnimplementedProxyEngineServiceServer) SnapshotList(context.Context, *ProxyEngineRequest) (*EngineSnapshotListProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotList not implemented")
}
func (UnimplementedProxyEngineServiceServer) SnapshotRevert(context.Context, *EngineSnapshotRevertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotRevert not implemented")
}
func (UnimplementedProxyEngineServiceServer) SnapshotPurge(context.Context, *EngineSnapshotPurgeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotPurge not implemented")
}
func (UnimplementedProxyEngineServiceServer) SnapshotPurgeStatus(context.Context, *ProxyEngineRequest) (*EngineSnapshotPurgeStatusProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotPurgeStatus not implemented")
}
func (UnimplementedProxyEngineServiceServer) SnapshotClone(context.Context, *EngineSnapshotCloneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotClone not implemented")
}
func (UnimplementedProxyEngineServiceServer) SnapshotCloneStatus(context.Context, *ProxyEngineRequest) (*EngineSnapshotCloneStatusProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotCloneStatus not implemented")
}
func (UnimplementedProxyEngineServiceServer) SnapshotRemove(context.Context, *EngineSnapshotRemoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotRemove not implemented")
}
func (UnimplementedProxyEngineServiceServer) SnapshotHash(context.Context, *EngineSnapshotHashRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotHash not implemented")
}
func (UnimplementedProxyEngineServiceServer) SnapshotHashStatus(context.Context, *EngineSnapshotHashStatusRequest) (*EngineSnapshotHashStatusProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotHashStatus not implemented")
}
func (UnimplementedProxyEngineServiceServer) SnapshotBackup(context.Context, *EngineSnapshotBackupRequest) (*EngineSnapshotBackupProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotBackup not implemented")
}
func (UnimplementedProxyEngineServiceServer) SnapshotBackupStatus(context.Context, *EngineSnapshotBackupStatusRequest) (*EngineSnapshotBackupStatusProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotBackupStatus not implemented")
}
func (UnimplementedProxyEngineServiceServer) BackupRestore(context.Context, *EngineBackupRestoreRequest) (*EngineBackupRestoreProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupRestore not implemented")
}
func (UnimplementedProxyEngineServiceServer) BackupRestoreStatus(context.Context, *ProxyEngineRequest) (*EngineBackupRestoreStatusProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupRestoreStatus not implemented")
}
func (UnimplementedProxyEngineServiceServer) BackupRestoreFinish(context.Context, *EngineBackupRestoreFinishRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupRestoreFinish not implemented")
}
func (UnimplementedProxyEngineServiceServer) CleanupBackupMountPoints(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupBackupMountPoints not implemented")
}
func (UnimplementedProxyEngineServiceServer) ReplicaAdd(context.Context, *EngineReplicaAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaAdd not implemented")
}
func (UnimplementedProxyEngineServiceServer) ReplicaList(context.Context, *ProxyEngineRequest) (*EngineReplicaListProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaList not implemented")
}
func (UnimplementedProxyEngineServiceServer) ReplicaRebuildingStatus(context.Context, *ProxyEngineRequest) (*EngineReplicaRebuildStatusProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaRebuildingStatus not implemented")
}
func (UnimplementedProxyEngineServiceServer) ReplicaVerifyRebuild(context.Context, *EngineReplicaVerifyRebuildRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaVerifyRebuild not implemented")
}
func (UnimplementedProxyEngineServiceServer) ReplicaRemove(context.Context, *EngineReplicaRemoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaRemove not implemented")
}
func (UnimplementedProxyEngineServiceServer) ReplicaModeUpdate(context.Context, *EngineReplicaModeUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaModeUpdate not implemented")
}
func (UnimplementedProxyEngineServiceServer) MetricsGet(context.Context, *ProxyEngineRequest) (*EngineMetricsGetProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsGet not implemented")
}
func (UnimplementedProxyEngineServiceServer) RemountReadOnlyVolume(context.Context, *RemountVolumeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemountReadOnlyVolume not implemented")
}
func (UnimplementedProxyEngineServiceServer) mustEmbedUnimplementedProxyEngineServiceServer() {}

// UnsafeProxyEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyEngineServiceServer will
// result in compilation errors.
type UnsafeProxyEngineServiceServer interface {
	mustEmbedUnimplementedProxyEngineServiceServer()
}

func RegisterProxyEngineServiceServer(s grpc.ServiceRegistrar, srv ProxyEngineServiceServer) {
	s.RegisterService(&ProxyEngineService_ServiceDesc, srv)
}

func _ProxyEngineService_ServerVersionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).ServerVersionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_ServerVersionGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).ServerVersionGet(ctx, req.(*ProxyEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_VolumeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).VolumeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_VolumeGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).VolumeGet(ctx, req.(*ProxyEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_VolumeExpand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineVolumeExpandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).VolumeExpand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_VolumeExpand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).VolumeExpand(ctx, req.(*EngineVolumeExpandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_VolumeFrontendStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineVolumeFrontendStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).VolumeFrontendStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_VolumeFrontendStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).VolumeFrontendStart(ctx, req.(*EngineVolumeFrontendStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_VolumeFrontendShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).VolumeFrontendShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_VolumeFrontendShutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).VolumeFrontendShutdown(ctx, req.(*ProxyEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_VolumeUnmapMarkSnapChainRemovedSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineVolumeUnmapMarkSnapChainRemovedSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).VolumeUnmapMarkSnapChainRemovedSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_VolumeUnmapMarkSnapChainRemovedSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).VolumeUnmapMarkSnapChainRemovedSet(ctx, req.(*EngineVolumeUnmapMarkSnapChainRemovedSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_VolumeSnapshotMaxCountSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineVolumeSnapshotMaxCountSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).VolumeSnapshotMaxCountSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_VolumeSnapshotMaxCountSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).VolumeSnapshotMaxCountSet(ctx, req.(*EngineVolumeSnapshotMaxCountSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_VolumeSnapshotMaxSizeSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineVolumeSnapshotMaxSizeSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).VolumeSnapshotMaxSizeSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_VolumeSnapshotMaxSizeSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).VolumeSnapshotMaxSizeSet(ctx, req.(*EngineVolumeSnapshotMaxSizeSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_VolumeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineVolumeSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).VolumeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_VolumeSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).VolumeSnapshot(ctx, req.(*EngineVolumeSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_SnapshotList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).SnapshotList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_SnapshotList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).SnapshotList(ctx, req.(*ProxyEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_SnapshotRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineSnapshotRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).SnapshotRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_SnapshotRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).SnapshotRevert(ctx, req.(*EngineSnapshotRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_SnapshotPurge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineSnapshotPurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).SnapshotPurge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_SnapshotPurge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).SnapshotPurge(ctx, req.(*EngineSnapshotPurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_SnapshotPurgeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).SnapshotPurgeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_SnapshotPurgeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).SnapshotPurgeStatus(ctx, req.(*ProxyEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_SnapshotClone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineSnapshotCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).SnapshotClone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_SnapshotClone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).SnapshotClone(ctx, req.(*EngineSnapshotCloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_SnapshotCloneStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).SnapshotCloneStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_SnapshotCloneStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).SnapshotCloneStatus(ctx, req.(*ProxyEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_SnapshotRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineSnapshotRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).SnapshotRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_SnapshotRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).SnapshotRemove(ctx, req.(*EngineSnapshotRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_SnapshotHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineSnapshotHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).SnapshotHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_SnapshotHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).SnapshotHash(ctx, req.(*EngineSnapshotHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_SnapshotHashStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineSnapshotHashStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).SnapshotHashStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_SnapshotHashStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).SnapshotHashStatus(ctx, req.(*EngineSnapshotHashStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_SnapshotBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineSnapshotBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).SnapshotBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_SnapshotBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).SnapshotBackup(ctx, req.(*EngineSnapshotBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_SnapshotBackupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineSnapshotBackupStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).SnapshotBackupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_SnapshotBackupStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).SnapshotBackupStatus(ctx, req.(*EngineSnapshotBackupStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_BackupRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineBackupRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).BackupRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_BackupRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).BackupRestore(ctx, req.(*EngineBackupRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_BackupRestoreStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).BackupRestoreStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_BackupRestoreStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).BackupRestoreStatus(ctx, req.(*ProxyEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_BackupRestoreFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineBackupRestoreFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).BackupRestoreFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_BackupRestoreFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).BackupRestoreFinish(ctx, req.(*EngineBackupRestoreFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_CleanupBackupMountPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).CleanupBackupMountPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_CleanupBackupMountPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).CleanupBackupMountPoints(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_ReplicaAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineReplicaAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).ReplicaAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_ReplicaAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).ReplicaAdd(ctx, req.(*EngineReplicaAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_ReplicaList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).ReplicaList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_ReplicaList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).ReplicaList(ctx, req.(*ProxyEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_ReplicaRebuildingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).ReplicaRebuildingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_ReplicaRebuildingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).ReplicaRebuildingStatus(ctx, req.(*ProxyEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_ReplicaVerifyRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineReplicaVerifyRebuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).ReplicaVerifyRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_ReplicaVerifyRebuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).ReplicaVerifyRebuild(ctx, req.(*EngineReplicaVerifyRebuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_ReplicaRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineReplicaRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).ReplicaRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_ReplicaRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).ReplicaRemove(ctx, req.(*EngineReplicaRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_ReplicaModeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineReplicaModeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).ReplicaModeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_ReplicaModeUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).ReplicaModeUpdate(ctx, req.(*EngineReplicaModeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_MetricsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).MetricsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_MetricsGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).MetricsGet(ctx, req.(*ProxyEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyEngineService_RemountReadOnlyVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemountVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyEngineServiceServer).RemountReadOnlyVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyEngineService_RemountReadOnlyVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyEngineServiceServer).RemountReadOnlyVolume(ctx, req.(*RemountVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyEngineService_ServiceDesc is the grpc.ServiceDesc for ProxyEngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyEngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imrpc.ProxyEngineService",
	HandlerType: (*ProxyEngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerVersionGet",
			Handler:    _ProxyEngineService_ServerVersionGet_Handler,
		},
		{
			MethodName: "VolumeGet",
			Handler:    _ProxyEngineService_VolumeGet_Handler,
		},
		{
			MethodName: "VolumeExpand",
			Handler:    _ProxyEngineService_VolumeExpand_Handler,
		},
		{
			MethodName: "VolumeFrontendStart",
			Handler:    _ProxyEngineService_VolumeFrontendStart_Handler,
		},
		{
			MethodName: "VolumeFrontendShutdown",
			Handler:    _ProxyEngineService_VolumeFrontendShutdown_Handler,
		},
		{
			MethodName: "VolumeUnmapMarkSnapChainRemovedSet",
			Handler:    _ProxyEngineService_VolumeUnmapMarkSnapChainRemovedSet_Handler,
		},
		{
			MethodName: "VolumeSnapshotMaxCountSet",
			Handler:    _ProxyEngineService_VolumeSnapshotMaxCountSet_Handler,
		},
		{
			MethodName: "VolumeSnapshotMaxSizeSet",
			Handler:    _ProxyEngineService_VolumeSnapshotMaxSizeSet_Handler,
		},
		{
			MethodName: "VolumeSnapshot",
			Handler:    _ProxyEngineService_VolumeSnapshot_Handler,
		},
		{
			MethodName: "SnapshotList",
			Handler:    _ProxyEngineService_SnapshotList_Handler,
		},
		{
			MethodName: "SnapshotRevert",
			Handler:    _ProxyEngineService_SnapshotRevert_Handler,
		},
		{
			MethodName: "SnapshotPurge",
			Handler:    _ProxyEngineService_SnapshotPurge_Handler,
		},
		{
			MethodName: "SnapshotPurgeStatus",
			Handler:    _ProxyEngineService_SnapshotPurgeStatus_Handler,
		},
		{
			MethodName: "SnapshotClone",
			Handler:    _ProxyEngineService_SnapshotClone_Handler,
		},
		{
			MethodName: "SnapshotCloneStatus",
			Handler:    _ProxyEngineService_SnapshotCloneStatus_Handler,
		},
		{
			MethodName: "SnapshotRemove",
			Handler:    _ProxyEngineService_SnapshotRemove_Handler,
		},
		{
			MethodName: "SnapshotHash",
			Handler:    _ProxyEngineService_SnapshotHash_Handler,
		},
		{
			MethodName: "SnapshotHashStatus",
			Handler:    _ProxyEngineService_SnapshotHashStatus_Handler,
		},
		{
			MethodName: "SnapshotBackup",
			Handler:    _ProxyEngineService_SnapshotBackup_Handler,
		},
		{
			MethodName: "SnapshotBackupStatus",
			Handler:    _ProxyEngineService_SnapshotBackupStatus_Handler,
		},
		{
			MethodName: "BackupRestore",
			Handler:    _ProxyEngineService_BackupRestore_Handler,
		},
		{
			MethodName: "BackupRestoreStatus",
			Handler:    _ProxyEngineService_BackupRestoreStatus_Handler,
		},
		{
			MethodName: "BackupRestoreFinish",
			Handler:    _ProxyEngineService_BackupRestoreFinish_Handler,
		},
		{
			MethodName: "CleanupBackupMountPoints",
			Handler:    _ProxyEngineService_CleanupBackupMountPoints_Handler,
		},
		{
			MethodName: "ReplicaAdd",
			Handler:    _ProxyEngineService_ReplicaAdd_Handler,
		},
		{
			MethodName: "ReplicaList",
			Handler:    _ProxyEngineService_ReplicaList_Handler,
		},
		{
			MethodName: "ReplicaRebuildingStatus",
			Handler:    _ProxyEngineService_ReplicaRebuildingStatus_Handler,
		},
		{
			MethodName: "ReplicaVerifyRebuild",
			Handler:    _ProxyEngineService_ReplicaVerifyRebuild_Handler,
		},
		{
			MethodName: "ReplicaRemove",
			Handler:    _ProxyEngineService_ReplicaRemove_Handler,
		},
		{
			MethodName: "ReplicaModeUpdate",
			Handler:    _ProxyEngineService_ReplicaModeUpdate_Handler,
		},
		{
			MethodName: "MetricsGet",
			Handler:    _ProxyEngineService_MetricsGet_Handler,
		},
		{
			MethodName: "RemountReadOnlyVolume",
			Handler:    _ProxyEngineService_RemountReadOnlyVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imrpc/proxy.proto",
}
