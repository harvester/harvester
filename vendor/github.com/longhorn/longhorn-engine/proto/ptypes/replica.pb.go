// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.3
// source: github.com/longhorn/longhorn-engine/proto/ptypes/replica.proto

package ptypes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReplicaCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size string `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ReplicaCreateRequest) Reset() {
	*x = ReplicaCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaCreateRequest) ProtoMessage() {}

func (x *ReplicaCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaCreateRequest.ProtoReflect.Descriptor instead.
func (*ReplicaCreateRequest) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{0}
}

func (x *ReplicaCreateRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

type ReplicaCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *ReplicaCreateResponse) Reset() {
	*x = ReplicaCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaCreateResponse) ProtoMessage() {}

func (x *ReplicaCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaCreateResponse.ProtoReflect.Descriptor instead.
func (*ReplicaCreateResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{1}
}

func (x *ReplicaCreateResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type ReplicaGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *ReplicaGetResponse) Reset() {
	*x = ReplicaGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaGetResponse) ProtoMessage() {}

func (x *ReplicaGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaGetResponse.ProtoReflect.Descriptor instead.
func (*ReplicaGetResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{2}
}

func (x *ReplicaGetResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type ReplicaOpenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *ReplicaOpenResponse) Reset() {
	*x = ReplicaOpenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaOpenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaOpenResponse) ProtoMessage() {}

func (x *ReplicaOpenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaOpenResponse.ProtoReflect.Descriptor instead.
func (*ReplicaOpenResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{3}
}

func (x *ReplicaOpenResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type ReplicaCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *ReplicaCloseResponse) Reset() {
	*x = ReplicaCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaCloseResponse) ProtoMessage() {}

func (x *ReplicaCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaCloseResponse.ProtoReflect.Descriptor instead.
func (*ReplicaCloseResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{4}
}

func (x *ReplicaCloseResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type ReplicaReloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *ReplicaReloadResponse) Reset() {
	*x = ReplicaReloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaReloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaReloadResponse) ProtoMessage() {}

func (x *ReplicaReloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaReloadResponse.ProtoReflect.Descriptor instead.
func (*ReplicaReloadResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{5}
}

func (x *ReplicaReloadResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type ReplicaRevertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Created string `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *ReplicaRevertRequest) Reset() {
	*x = ReplicaRevertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaRevertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaRevertRequest) ProtoMessage() {}

func (x *ReplicaRevertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaRevertRequest.ProtoReflect.Descriptor instead.
func (*ReplicaRevertRequest) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{6}
}

func (x *ReplicaRevertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReplicaRevertRequest) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

type ReplicaRevertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *ReplicaRevertResponse) Reset() {
	*x = ReplicaRevertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaRevertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaRevertResponse) ProtoMessage() {}

func (x *ReplicaRevertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaRevertResponse.ProtoReflect.Descriptor instead.
func (*ReplicaRevertResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{7}
}

func (x *ReplicaRevertResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type ReplicaSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UserCreated bool              `protobuf:"varint,2,opt,name=user_created,json=userCreated,proto3" json:"user_created,omitempty"`
	Created     string            `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	Labels      map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReplicaSnapshotRequest) Reset() {
	*x = ReplicaSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaSnapshotRequest) ProtoMessage() {}

func (x *ReplicaSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaSnapshotRequest.ProtoReflect.Descriptor instead.
func (*ReplicaSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{8}
}

func (x *ReplicaSnapshotRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReplicaSnapshotRequest) GetUserCreated() bool {
	if x != nil {
		return x.UserCreated
	}
	return false
}

func (x *ReplicaSnapshotRequest) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *ReplicaSnapshotRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ReplicaSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *ReplicaSnapshotResponse) Reset() {
	*x = ReplicaSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaSnapshotResponse) ProtoMessage() {}

func (x *ReplicaSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaSnapshotResponse.ProtoReflect.Descriptor instead.
func (*ReplicaSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{9}
}

func (x *ReplicaSnapshotResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type ReplicaExpandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ReplicaExpandRequest) Reset() {
	*x = ReplicaExpandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaExpandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaExpandRequest) ProtoMessage() {}

func (x *ReplicaExpandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaExpandRequest.ProtoReflect.Descriptor instead.
func (*ReplicaExpandRequest) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{10}
}

func (x *ReplicaExpandRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ReplicaExpandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *ReplicaExpandResponse) Reset() {
	*x = ReplicaExpandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaExpandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaExpandResponse) ProtoMessage() {}

func (x *ReplicaExpandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaExpandResponse.ProtoReflect.Descriptor instead.
func (*ReplicaExpandResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{11}
}

func (x *ReplicaExpandResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type DiskRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Force bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DiskRemoveRequest) Reset() {
	*x = DiskRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskRemoveRequest) ProtoMessage() {}

func (x *DiskRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskRemoveRequest.ProtoReflect.Descriptor instead.
func (*DiskRemoveRequest) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{12}
}

func (x *DiskRemoveRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiskRemoveRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DiskRemoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *DiskRemoveResponse) Reset() {
	*x = DiskRemoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskRemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskRemoveResponse) ProtoMessage() {}

func (x *DiskRemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskRemoveResponse.ProtoReflect.Descriptor instead.
func (*DiskRemoveResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{13}
}

func (x *DiskRemoveResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type DiskReplaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *DiskReplaceRequest) Reset() {
	*x = DiskReplaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskReplaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskReplaceRequest) ProtoMessage() {}

func (x *DiskReplaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskReplaceRequest.ProtoReflect.Descriptor instead.
func (*DiskReplaceRequest) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{14}
}

func (x *DiskReplaceRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *DiskReplaceRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type DiskReplaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *DiskReplaceResponse) Reset() {
	*x = DiskReplaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskReplaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskReplaceResponse) ProtoMessage() {}

func (x *DiskReplaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskReplaceResponse.ProtoReflect.Descriptor instead.
func (*DiskReplaceResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{15}
}

func (x *DiskReplaceResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type DiskPrepareRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DiskPrepareRemoveRequest) Reset() {
	*x = DiskPrepareRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskPrepareRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPrepareRemoveRequest) ProtoMessage() {}

func (x *DiskPrepareRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPrepareRemoveRequest.ProtoReflect.Descriptor instead.
func (*DiskPrepareRemoveRequest) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{16}
}

func (x *DiskPrepareRemoveRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DiskPrepareRemoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*PrepareRemoveAction `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *DiskPrepareRemoveResponse) Reset() {
	*x = DiskPrepareRemoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskPrepareRemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPrepareRemoveResponse) ProtoMessage() {}

func (x *DiskPrepareRemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPrepareRemoveResponse.ProtoReflect.Descriptor instead.
func (*DiskPrepareRemoveResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{17}
}

func (x *DiskPrepareRemoveResponse) GetOperations() []*PrepareRemoveAction {
	if x != nil {
		return x.Operations
	}
	return nil
}

type DiskMarkAsRemovedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DiskMarkAsRemovedRequest) Reset() {
	*x = DiskMarkAsRemovedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskMarkAsRemovedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskMarkAsRemovedRequest) ProtoMessage() {}

func (x *DiskMarkAsRemovedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskMarkAsRemovedRequest.ProtoReflect.Descriptor instead.
func (*DiskMarkAsRemovedRequest) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{18}
}

func (x *DiskMarkAsRemovedRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DiskMarkAsRemovedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *DiskMarkAsRemovedResponse) Reset() {
	*x = DiskMarkAsRemovedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskMarkAsRemovedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskMarkAsRemovedResponse) ProtoMessage() {}

func (x *DiskMarkAsRemovedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskMarkAsRemovedResponse.ProtoReflect.Descriptor instead.
func (*DiskMarkAsRemovedResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{19}
}

func (x *DiskMarkAsRemovedResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type RebuildingSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rebuilding bool `protobuf:"varint,1,opt,name=rebuilding,proto3" json:"rebuilding,omitempty"`
}

func (x *RebuildingSetRequest) Reset() {
	*x = RebuildingSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildingSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildingSetRequest) ProtoMessage() {}

func (x *RebuildingSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildingSetRequest.ProtoReflect.Descriptor instead.
func (*RebuildingSetRequest) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{20}
}

func (x *RebuildingSetRequest) GetRebuilding() bool {
	if x != nil {
		return x.Rebuilding
	}
	return false
}

type RebuildingSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *RebuildingSetResponse) Reset() {
	*x = RebuildingSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildingSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildingSetResponse) ProtoMessage() {}

func (x *RebuildingSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildingSetResponse.ProtoReflect.Descriptor instead.
func (*RebuildingSetResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{21}
}

func (x *RebuildingSetResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type RevisionCounterSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counter int64 `protobuf:"varint,1,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (x *RevisionCounterSetRequest) Reset() {
	*x = RevisionCounterSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevisionCounterSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevisionCounterSetRequest) ProtoMessage() {}

func (x *RevisionCounterSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevisionCounterSetRequest.ProtoReflect.Descriptor instead.
func (*RevisionCounterSetRequest) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{22}
}

func (x *RevisionCounterSetRequest) GetCounter() int64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

type RevisionCounterSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *RevisionCounterSetResponse) Reset() {
	*x = RevisionCounterSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevisionCounterSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevisionCounterSetResponse) ProtoMessage() {}

func (x *RevisionCounterSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevisionCounterSetResponse.ProtoReflect.Descriptor instead.
func (*RevisionCounterSetResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{23}
}

func (x *RevisionCounterSetResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type UnmapMarkDiskChainRemovedSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *UnmapMarkDiskChainRemovedSetRequest) Reset() {
	*x = UnmapMarkDiskChainRemovedSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmapMarkDiskChainRemovedSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmapMarkDiskChainRemovedSetRequest) ProtoMessage() {}

func (x *UnmapMarkDiskChainRemovedSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmapMarkDiskChainRemovedSetRequest.ProtoReflect.Descriptor instead.
func (*UnmapMarkDiskChainRemovedSetRequest) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{24}
}

func (x *UnmapMarkDiskChainRemovedSetRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type UnmapMarkDiskChainRemovedSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *UnmapMarkDiskChainRemovedSetResponse) Reset() {
	*x = UnmapMarkDiskChainRemovedSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmapMarkDiskChainRemovedSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmapMarkDiskChainRemovedSetResponse) ProtoMessage() {}

func (x *UnmapMarkDiskChainRemovedSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmapMarkDiskChainRemovedSetResponse.ProtoReflect.Descriptor instead.
func (*UnmapMarkDiskChainRemovedSetResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{25}
}

func (x *UnmapMarkDiskChainRemovedSetResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type SnapshotMaxCountSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SnapshotMaxCountSetRequest) Reset() {
	*x = SnapshotMaxCountSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotMaxCountSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotMaxCountSetRequest) ProtoMessage() {}

func (x *SnapshotMaxCountSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotMaxCountSetRequest.ProtoReflect.Descriptor instead.
func (*SnapshotMaxCountSetRequest) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{26}
}

func (x *SnapshotMaxCountSetRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SnapshotMaxCountSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *SnapshotMaxCountSetResponse) Reset() {
	*x = SnapshotMaxCountSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotMaxCountSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotMaxCountSetResponse) ProtoMessage() {}

func (x *SnapshotMaxCountSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotMaxCountSetResponse.ProtoReflect.Descriptor instead.
func (*SnapshotMaxCountSetResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{27}
}

func (x *SnapshotMaxCountSetResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type SnapshotMaxSizeSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *SnapshotMaxSizeSetRequest) Reset() {
	*x = SnapshotMaxSizeSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotMaxSizeSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotMaxSizeSetRequest) ProtoMessage() {}

func (x *SnapshotMaxSizeSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotMaxSizeSetRequest.ProtoReflect.Descriptor instead.
func (*SnapshotMaxSizeSetRequest) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{28}
}

func (x *SnapshotMaxSizeSetRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SnapshotMaxSizeSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica *Replica `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *SnapshotMaxSizeSetResponse) Reset() {
	*x = SnapshotMaxSizeSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotMaxSizeSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotMaxSizeSetResponse) ProtoMessage() {}

func (x *SnapshotMaxSizeSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotMaxSizeSetResponse.ProtoReflect.Descriptor instead.
func (*SnapshotMaxSizeSetResponse) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{29}
}

func (x *SnapshotMaxSizeSetResponse) GetReplica() *Replica {
	if x != nil {
		return x.Replica
	}
	return nil
}

type DiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent      string            `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Children    map[string]bool   `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Removed     bool              `protobuf:"varint,4,opt,name=removed,proto3" json:"removed,omitempty"`
	UserCreated bool              `protobuf:"varint,5,opt,name=user_created,json=userCreated,proto3" json:"user_created,omitempty"`
	Created     string            `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	Size        string            `protobuf:"bytes,7,opt,name=size,proto3" json:"size,omitempty"`
	Labels      map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DiskInfo) Reset() {
	*x = DiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskInfo) ProtoMessage() {}

func (x *DiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskInfo.ProtoReflect.Descriptor instead.
func (*DiskInfo) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{30}
}

func (x *DiskInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiskInfo) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *DiskInfo) GetChildren() map[string]bool {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *DiskInfo) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

func (x *DiskInfo) GetUserCreated() bool {
	if x != nil {
		return x.UserCreated
	}
	return false
}

func (x *DiskInfo) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *DiskInfo) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *DiskInfo) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Replica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dirty                     bool                 `protobuf:"varint,1,opt,name=dirty,proto3" json:"dirty,omitempty"`
	Rebuilding                bool                 `protobuf:"varint,2,opt,name=rebuilding,proto3" json:"rebuilding,omitempty"`
	Head                      string               `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
	Parent                    string               `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	Size                      string               `protobuf:"bytes,5,opt,name=size,proto3" json:"size,omitempty"`
	SectorSize                int64                `protobuf:"varint,6,opt,name=sector_size,json=sectorSize,proto3" json:"sector_size,omitempty"`
	BackingFile               string               `protobuf:"bytes,7,opt,name=backing_file,json=backingFile,proto3" json:"backing_file,omitempty"`
	State                     string               `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	Chain                     []string             `protobuf:"bytes,9,rep,name=chain,proto3" json:"chain,omitempty"`
	Disks                     map[string]*DiskInfo `protobuf:"bytes,10,rep,name=disks,proto3" json:"disks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RemainSnapshots           int32                `protobuf:"varint,11,opt,name=remain_snapshots,json=remainSnapshots,proto3" json:"remain_snapshots,omitempty"`
	RevisionCounter           int64                `protobuf:"varint,12,opt,name=revision_counter,json=revisionCounter,proto3" json:"revision_counter,omitempty"`
	LastModifyTime            int64                `protobuf:"varint,13,opt,name=last_modify_time,json=lastModifyTime,proto3" json:"last_modify_time,omitempty"`
	HeadFileSize              int64                `protobuf:"varint,14,opt,name=head_file_size,json=headFileSize,proto3" json:"head_file_size,omitempty"`
	RevisionCounterDisabled   bool                 `protobuf:"varint,15,opt,name=revision_counter_disabled,json=revisionCounterDisabled,proto3" json:"revision_counter_disabled,omitempty"`
	UnmapMarkDiskChainRemoved bool                 `protobuf:"varint,16,opt,name=unmap_mark_disk_chain_removed,json=unmapMarkDiskChainRemoved,proto3" json:"unmap_mark_disk_chain_removed,omitempty"`
	SnapshotCountUsage        int32                `protobuf:"varint,17,opt,name=snapshot_count_usage,json=snapshotCountUsage,proto3" json:"snapshot_count_usage,omitempty"`
	SnapshotSizeUsage         int64                `protobuf:"varint,18,opt,name=snapshot_size_usage,json=snapshotSizeUsage,proto3" json:"snapshot_size_usage,omitempty"`
}

func (x *Replica) Reset() {
	*x = Replica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Replica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Replica) ProtoMessage() {}

func (x *Replica) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Replica.ProtoReflect.Descriptor instead.
func (*Replica) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{31}
}

func (x *Replica) GetDirty() bool {
	if x != nil {
		return x.Dirty
	}
	return false
}

func (x *Replica) GetRebuilding() bool {
	if x != nil {
		return x.Rebuilding
	}
	return false
}

func (x *Replica) GetHead() string {
	if x != nil {
		return x.Head
	}
	return ""
}

func (x *Replica) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Replica) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *Replica) GetSectorSize() int64 {
	if x != nil {
		return x.SectorSize
	}
	return 0
}

func (x *Replica) GetBackingFile() string {
	if x != nil {
		return x.BackingFile
	}
	return ""
}

func (x *Replica) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Replica) GetChain() []string {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *Replica) GetDisks() map[string]*DiskInfo {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *Replica) GetRemainSnapshots() int32 {
	if x != nil {
		return x.RemainSnapshots
	}
	return 0
}

func (x *Replica) GetRevisionCounter() int64 {
	if x != nil {
		return x.RevisionCounter
	}
	return 0
}

func (x *Replica) GetLastModifyTime() int64 {
	if x != nil {
		return x.LastModifyTime
	}
	return 0
}

func (x *Replica) GetHeadFileSize() int64 {
	if x != nil {
		return x.HeadFileSize
	}
	return 0
}

func (x *Replica) GetRevisionCounterDisabled() bool {
	if x != nil {
		return x.RevisionCounterDisabled
	}
	return false
}

func (x *Replica) GetUnmapMarkDiskChainRemoved() bool {
	if x != nil {
		return x.UnmapMarkDiskChainRemoved
	}
	return false
}

func (x *Replica) GetSnapshotCountUsage() int32 {
	if x != nil {
		return x.SnapshotCountUsage
	}
	return 0
}

func (x *Replica) GetSnapshotSizeUsage() int64 {
	if x != nil {
		return x.SnapshotSizeUsage
	}
	return 0
}

type PrepareRemoveAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *PrepareRemoveAction) Reset() {
	*x = PrepareRemoveAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareRemoveAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRemoveAction) ProtoMessage() {}

func (x *PrepareRemoveAction) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRemoveAction.ProtoReflect.Descriptor instead.
func (*PrepareRemoveAction) Descriptor() ([]byte, []int) {
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP(), []int{32}
}

func (x *PrepareRemoveAction) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PrepareRemoveAction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PrepareRemoveAction) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

var File_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto protoreflect.FileDescriptor

var file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6f, 0x6e,
	0x67, 0x68, 0x6f, 0x72, 0x6e, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x6e, 0x2d, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x42, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x22, 0x3f, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x22, 0x40, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x22, 0x41, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x22, 0x42, 0x0a, 0x15, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x22,
	0x44, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x42, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x22, 0xe8, 0x01, 0x0a, 0x16, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x22, 0x2a, 0x0a, 0x14, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x42, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x22, 0x3d, 0x0a, 0x11, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x3f, 0x0a, 0x12, 0x44, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x22, 0x44, 0x0a, 0x12, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x40, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x22, 0x2e, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x58, 0x0a, 0x19, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2e, 0x0a, 0x18,
	0x44, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x19,
	0x44, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x22, 0x36, 0x0a, 0x14, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x42, 0x0a, 0x15,
	0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x22, 0x35, 0x0a, 0x19, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x1a, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x22, 0x3f, 0x0a, 0x23, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x69, 0x73,
	0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x51, 0x0a, 0x24, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x69,
	0x73, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x22, 0x32, 0x0a, 0x1a, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x1b, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x22, 0x2f, 0x0a, 0x19, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61,
	0x78, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x47, 0x0a, 0x1a, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d,
	0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x22, 0x8b, 0x03, 0x0a,
	0x08, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x05, 0x0a, 0x07, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x05,
	0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x1d, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x4d, 0x61,
	0x72, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x4a, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x5d, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x32,
	0xeb, 0x0b, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x70, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1b, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1d, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x2e,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x6b,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x20, 0x2e,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x6b,
	0x41, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x20, 0x2e, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x0d, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x12, 0x1c, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7b, 0x0a, 0x1c, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x44, 0x69, 0x73, 0x6b,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x65, 0x74, 0x12,
	0x2b, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x4d, 0x61,
	0x72, 0x6b, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x44,
	0x69, 0x73, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x13,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x12, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x32, 0x5a,
	0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6f, 0x6e, 0x67,
	0x68, 0x6f, 0x72, 0x6e, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x6e, 0x2d, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescOnce sync.Once
	file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescData = file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDesc
)

func file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescGZIP() []byte {
	file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescOnce.Do(func() {
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescData)
	})
	return file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDescData
}

var file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_goTypes = []interface{}{
	(*ReplicaCreateRequest)(nil),                 // 0: ptypes.ReplicaCreateRequest
	(*ReplicaCreateResponse)(nil),                // 1: ptypes.ReplicaCreateResponse
	(*ReplicaGetResponse)(nil),                   // 2: ptypes.ReplicaGetResponse
	(*ReplicaOpenResponse)(nil),                  // 3: ptypes.ReplicaOpenResponse
	(*ReplicaCloseResponse)(nil),                 // 4: ptypes.ReplicaCloseResponse
	(*ReplicaReloadResponse)(nil),                // 5: ptypes.ReplicaReloadResponse
	(*ReplicaRevertRequest)(nil),                 // 6: ptypes.ReplicaRevertRequest
	(*ReplicaRevertResponse)(nil),                // 7: ptypes.ReplicaRevertResponse
	(*ReplicaSnapshotRequest)(nil),               // 8: ptypes.ReplicaSnapshotRequest
	(*ReplicaSnapshotResponse)(nil),              // 9: ptypes.ReplicaSnapshotResponse
	(*ReplicaExpandRequest)(nil),                 // 10: ptypes.ReplicaExpandRequest
	(*ReplicaExpandResponse)(nil),                // 11: ptypes.ReplicaExpandResponse
	(*DiskRemoveRequest)(nil),                    // 12: ptypes.DiskRemoveRequest
	(*DiskRemoveResponse)(nil),                   // 13: ptypes.DiskRemoveResponse
	(*DiskReplaceRequest)(nil),                   // 14: ptypes.DiskReplaceRequest
	(*DiskReplaceResponse)(nil),                  // 15: ptypes.DiskReplaceResponse
	(*DiskPrepareRemoveRequest)(nil),             // 16: ptypes.DiskPrepareRemoveRequest
	(*DiskPrepareRemoveResponse)(nil),            // 17: ptypes.DiskPrepareRemoveResponse
	(*DiskMarkAsRemovedRequest)(nil),             // 18: ptypes.DiskMarkAsRemovedRequest
	(*DiskMarkAsRemovedResponse)(nil),            // 19: ptypes.DiskMarkAsRemovedResponse
	(*RebuildingSetRequest)(nil),                 // 20: ptypes.RebuildingSetRequest
	(*RebuildingSetResponse)(nil),                // 21: ptypes.RebuildingSetResponse
	(*RevisionCounterSetRequest)(nil),            // 22: ptypes.RevisionCounterSetRequest
	(*RevisionCounterSetResponse)(nil),           // 23: ptypes.RevisionCounterSetResponse
	(*UnmapMarkDiskChainRemovedSetRequest)(nil),  // 24: ptypes.UnmapMarkDiskChainRemovedSetRequest
	(*UnmapMarkDiskChainRemovedSetResponse)(nil), // 25: ptypes.UnmapMarkDiskChainRemovedSetResponse
	(*SnapshotMaxCountSetRequest)(nil),           // 26: ptypes.SnapshotMaxCountSetRequest
	(*SnapshotMaxCountSetResponse)(nil),          // 27: ptypes.SnapshotMaxCountSetResponse
	(*SnapshotMaxSizeSetRequest)(nil),            // 28: ptypes.SnapshotMaxSizeSetRequest
	(*SnapshotMaxSizeSetResponse)(nil),           // 29: ptypes.SnapshotMaxSizeSetResponse
	(*DiskInfo)(nil),                             // 30: ptypes.DiskInfo
	(*Replica)(nil),                              // 31: ptypes.Replica
	(*PrepareRemoveAction)(nil),                  // 32: ptypes.PrepareRemoveAction
	nil,                                          // 33: ptypes.ReplicaSnapshotRequest.LabelsEntry
	nil,                                          // 34: ptypes.DiskInfo.ChildrenEntry
	nil,                                          // 35: ptypes.DiskInfo.LabelsEntry
	nil,                                          // 36: ptypes.Replica.DisksEntry
	(*emptypb.Empty)(nil),                        // 37: google.protobuf.Empty
}
var file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_depIdxs = []int32{
	31, // 0: ptypes.ReplicaCreateResponse.replica:type_name -> ptypes.Replica
	31, // 1: ptypes.ReplicaGetResponse.replica:type_name -> ptypes.Replica
	31, // 2: ptypes.ReplicaOpenResponse.replica:type_name -> ptypes.Replica
	31, // 3: ptypes.ReplicaCloseResponse.replica:type_name -> ptypes.Replica
	31, // 4: ptypes.ReplicaReloadResponse.replica:type_name -> ptypes.Replica
	31, // 5: ptypes.ReplicaRevertResponse.replica:type_name -> ptypes.Replica
	33, // 6: ptypes.ReplicaSnapshotRequest.labels:type_name -> ptypes.ReplicaSnapshotRequest.LabelsEntry
	31, // 7: ptypes.ReplicaSnapshotResponse.replica:type_name -> ptypes.Replica
	31, // 8: ptypes.ReplicaExpandResponse.replica:type_name -> ptypes.Replica
	31, // 9: ptypes.DiskRemoveResponse.replica:type_name -> ptypes.Replica
	31, // 10: ptypes.DiskReplaceResponse.replica:type_name -> ptypes.Replica
	32, // 11: ptypes.DiskPrepareRemoveResponse.operations:type_name -> ptypes.PrepareRemoveAction
	31, // 12: ptypes.DiskMarkAsRemovedResponse.replica:type_name -> ptypes.Replica
	31, // 13: ptypes.RebuildingSetResponse.replica:type_name -> ptypes.Replica
	31, // 14: ptypes.RevisionCounterSetResponse.replica:type_name -> ptypes.Replica
	31, // 15: ptypes.UnmapMarkDiskChainRemovedSetResponse.replica:type_name -> ptypes.Replica
	31, // 16: ptypes.SnapshotMaxCountSetResponse.replica:type_name -> ptypes.Replica
	31, // 17: ptypes.SnapshotMaxSizeSetResponse.replica:type_name -> ptypes.Replica
	34, // 18: ptypes.DiskInfo.children:type_name -> ptypes.DiskInfo.ChildrenEntry
	35, // 19: ptypes.DiskInfo.labels:type_name -> ptypes.DiskInfo.LabelsEntry
	36, // 20: ptypes.Replica.disks:type_name -> ptypes.Replica.DisksEntry
	30, // 21: ptypes.Replica.DisksEntry.value:type_name -> ptypes.DiskInfo
	0,  // 22: ptypes.ReplicaService.ReplicaCreate:input_type -> ptypes.ReplicaCreateRequest
	37, // 23: ptypes.ReplicaService.ReplicaDelete:input_type -> google.protobuf.Empty
	37, // 24: ptypes.ReplicaService.ReplicaGet:input_type -> google.protobuf.Empty
	37, // 25: ptypes.ReplicaService.ReplicaOpen:input_type -> google.protobuf.Empty
	37, // 26: ptypes.ReplicaService.ReplicaClose:input_type -> google.protobuf.Empty
	37, // 27: ptypes.ReplicaService.ReplicaReload:input_type -> google.protobuf.Empty
	6,  // 28: ptypes.ReplicaService.ReplicaRevert:input_type -> ptypes.ReplicaRevertRequest
	8,  // 29: ptypes.ReplicaService.ReplicaSnapshot:input_type -> ptypes.ReplicaSnapshotRequest
	10, // 30: ptypes.ReplicaService.ReplicaExpand:input_type -> ptypes.ReplicaExpandRequest
	12, // 31: ptypes.ReplicaService.DiskRemove:input_type -> ptypes.DiskRemoveRequest
	14, // 32: ptypes.ReplicaService.DiskReplace:input_type -> ptypes.DiskReplaceRequest
	16, // 33: ptypes.ReplicaService.DiskPrepareRemove:input_type -> ptypes.DiskPrepareRemoveRequest
	18, // 34: ptypes.ReplicaService.DiskMarkAsRemoved:input_type -> ptypes.DiskMarkAsRemovedRequest
	20, // 35: ptypes.ReplicaService.RebuildingSet:input_type -> ptypes.RebuildingSetRequest
	22, // 36: ptypes.ReplicaService.RevisionCounterSet:input_type -> ptypes.RevisionCounterSetRequest
	24, // 37: ptypes.ReplicaService.UnmapMarkDiskChainRemovedSet:input_type -> ptypes.UnmapMarkDiskChainRemovedSetRequest
	26, // 38: ptypes.ReplicaService.SnapshotMaxCountSet:input_type -> ptypes.SnapshotMaxCountSetRequest
	28, // 39: ptypes.ReplicaService.SnapshotMaxSizeSet:input_type -> ptypes.SnapshotMaxSizeSetRequest
	1,  // 40: ptypes.ReplicaService.ReplicaCreate:output_type -> ptypes.ReplicaCreateResponse
	37, // 41: ptypes.ReplicaService.ReplicaDelete:output_type -> google.protobuf.Empty
	2,  // 42: ptypes.ReplicaService.ReplicaGet:output_type -> ptypes.ReplicaGetResponse
	3,  // 43: ptypes.ReplicaService.ReplicaOpen:output_type -> ptypes.ReplicaOpenResponse
	4,  // 44: ptypes.ReplicaService.ReplicaClose:output_type -> ptypes.ReplicaCloseResponse
	5,  // 45: ptypes.ReplicaService.ReplicaReload:output_type -> ptypes.ReplicaReloadResponse
	7,  // 46: ptypes.ReplicaService.ReplicaRevert:output_type -> ptypes.ReplicaRevertResponse
	9,  // 47: ptypes.ReplicaService.ReplicaSnapshot:output_type -> ptypes.ReplicaSnapshotResponse
	11, // 48: ptypes.ReplicaService.ReplicaExpand:output_type -> ptypes.ReplicaExpandResponse
	13, // 49: ptypes.ReplicaService.DiskRemove:output_type -> ptypes.DiskRemoveResponse
	15, // 50: ptypes.ReplicaService.DiskReplace:output_type -> ptypes.DiskReplaceResponse
	17, // 51: ptypes.ReplicaService.DiskPrepareRemove:output_type -> ptypes.DiskPrepareRemoveResponse
	19, // 52: ptypes.ReplicaService.DiskMarkAsRemoved:output_type -> ptypes.DiskMarkAsRemovedResponse
	21, // 53: ptypes.ReplicaService.RebuildingSet:output_type -> ptypes.RebuildingSetResponse
	23, // 54: ptypes.ReplicaService.RevisionCounterSet:output_type -> ptypes.RevisionCounterSetResponse
	25, // 55: ptypes.ReplicaService.UnmapMarkDiskChainRemovedSet:output_type -> ptypes.UnmapMarkDiskChainRemovedSetResponse
	27, // 56: ptypes.ReplicaService.SnapshotMaxCountSet:output_type -> ptypes.SnapshotMaxCountSetResponse
	29, // 57: ptypes.ReplicaService.SnapshotMaxSizeSet:output_type -> ptypes.SnapshotMaxSizeSetResponse
	40, // [40:58] is the sub-list for method output_type
	22, // [22:40] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_init() }
func file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_init() {
	if File_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaOpenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaReloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaRevertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaRevertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaExpandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaExpandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskRemoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskReplaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskReplaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskPrepareRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskPrepareRemoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskMarkAsRemovedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskMarkAsRemovedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildingSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildingSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevisionCounterSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevisionCounterSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmapMarkDiskChainRemovedSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmapMarkDiskChainRemovedSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotMaxCountSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotMaxCountSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotMaxSizeSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotMaxSizeSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Replica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareRemoveAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_goTypes,
		DependencyIndexes: file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_depIdxs,
		MessageInfos:      file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_msgTypes,
	}.Build()
	File_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto = out.File
	file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_rawDesc = nil
	file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_goTypes = nil
	file_github_com_longhorn_longhorn_engine_proto_ptypes_replica_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReplicaServiceClient is the client API for ReplicaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicaServiceClient interface {
	ReplicaCreate(ctx context.Context, in *ReplicaCreateRequest, opts ...grpc.CallOption) (*ReplicaCreateResponse, error)
	ReplicaDelete(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReplicaGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReplicaGetResponse, error)
	ReplicaOpen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReplicaOpenResponse, error)
	ReplicaClose(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReplicaCloseResponse, error)
	ReplicaReload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReplicaReloadResponse, error)
	ReplicaRevert(ctx context.Context, in *ReplicaRevertRequest, opts ...grpc.CallOption) (*ReplicaRevertResponse, error)
	ReplicaSnapshot(ctx context.Context, in *ReplicaSnapshotRequest, opts ...grpc.CallOption) (*ReplicaSnapshotResponse, error)
	ReplicaExpand(ctx context.Context, in *ReplicaExpandRequest, opts ...grpc.CallOption) (*ReplicaExpandResponse, error)
	DiskRemove(ctx context.Context, in *DiskRemoveRequest, opts ...grpc.CallOption) (*DiskRemoveResponse, error)
	DiskReplace(ctx context.Context, in *DiskReplaceRequest, opts ...grpc.CallOption) (*DiskReplaceResponse, error)
	DiskPrepareRemove(ctx context.Context, in *DiskPrepareRemoveRequest, opts ...grpc.CallOption) (*DiskPrepareRemoveResponse, error)
	DiskMarkAsRemoved(ctx context.Context, in *DiskMarkAsRemovedRequest, opts ...grpc.CallOption) (*DiskMarkAsRemovedResponse, error)
	RebuildingSet(ctx context.Context, in *RebuildingSetRequest, opts ...grpc.CallOption) (*RebuildingSetResponse, error)
	RevisionCounterSet(ctx context.Context, in *RevisionCounterSetRequest, opts ...grpc.CallOption) (*RevisionCounterSetResponse, error)
	UnmapMarkDiskChainRemovedSet(ctx context.Context, in *UnmapMarkDiskChainRemovedSetRequest, opts ...grpc.CallOption) (*UnmapMarkDiskChainRemovedSetResponse, error)
	SnapshotMaxCountSet(ctx context.Context, in *SnapshotMaxCountSetRequest, opts ...grpc.CallOption) (*SnapshotMaxCountSetResponse, error)
	SnapshotMaxSizeSet(ctx context.Context, in *SnapshotMaxSizeSetRequest, opts ...grpc.CallOption) (*SnapshotMaxSizeSetResponse, error)
}

type replicaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicaServiceClient(cc grpc.ClientConnInterface) ReplicaServiceClient {
	return &replicaServiceClient{cc}
}

func (c *replicaServiceClient) ReplicaCreate(ctx context.Context, in *ReplicaCreateRequest, opts ...grpc.CallOption) (*ReplicaCreateResponse, error) {
	out := new(ReplicaCreateResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/ReplicaCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) ReplicaDelete(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/ReplicaDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) ReplicaGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReplicaGetResponse, error) {
	out := new(ReplicaGetResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/ReplicaGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) ReplicaOpen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReplicaOpenResponse, error) {
	out := new(ReplicaOpenResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/ReplicaOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) ReplicaClose(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReplicaCloseResponse, error) {
	out := new(ReplicaCloseResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/ReplicaClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) ReplicaReload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReplicaReloadResponse, error) {
	out := new(ReplicaReloadResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/ReplicaReload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) ReplicaRevert(ctx context.Context, in *ReplicaRevertRequest, opts ...grpc.CallOption) (*ReplicaRevertResponse, error) {
	out := new(ReplicaRevertResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/ReplicaRevert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) ReplicaSnapshot(ctx context.Context, in *ReplicaSnapshotRequest, opts ...grpc.CallOption) (*ReplicaSnapshotResponse, error) {
	out := new(ReplicaSnapshotResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/ReplicaSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) ReplicaExpand(ctx context.Context, in *ReplicaExpandRequest, opts ...grpc.CallOption) (*ReplicaExpandResponse, error) {
	out := new(ReplicaExpandResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/ReplicaExpand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) DiskRemove(ctx context.Context, in *DiskRemoveRequest, opts ...grpc.CallOption) (*DiskRemoveResponse, error) {
	out := new(DiskRemoveResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/DiskRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) DiskReplace(ctx context.Context, in *DiskReplaceRequest, opts ...grpc.CallOption) (*DiskReplaceResponse, error) {
	out := new(DiskReplaceResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/DiskReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) DiskPrepareRemove(ctx context.Context, in *DiskPrepareRemoveRequest, opts ...grpc.CallOption) (*DiskPrepareRemoveResponse, error) {
	out := new(DiskPrepareRemoveResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/DiskPrepareRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) DiskMarkAsRemoved(ctx context.Context, in *DiskMarkAsRemovedRequest, opts ...grpc.CallOption) (*DiskMarkAsRemovedResponse, error) {
	out := new(DiskMarkAsRemovedResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/DiskMarkAsRemoved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) RebuildingSet(ctx context.Context, in *RebuildingSetRequest, opts ...grpc.CallOption) (*RebuildingSetResponse, error) {
	out := new(RebuildingSetResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/RebuildingSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) RevisionCounterSet(ctx context.Context, in *RevisionCounterSetRequest, opts ...grpc.CallOption) (*RevisionCounterSetResponse, error) {
	out := new(RevisionCounterSetResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/RevisionCounterSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) UnmapMarkDiskChainRemovedSet(ctx context.Context, in *UnmapMarkDiskChainRemovedSetRequest, opts ...grpc.CallOption) (*UnmapMarkDiskChainRemovedSetResponse, error) {
	out := new(UnmapMarkDiskChainRemovedSetResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/UnmapMarkDiskChainRemovedSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) SnapshotMaxCountSet(ctx context.Context, in *SnapshotMaxCountSetRequest, opts ...grpc.CallOption) (*SnapshotMaxCountSetResponse, error) {
	out := new(SnapshotMaxCountSetResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/SnapshotMaxCountSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) SnapshotMaxSizeSet(ctx context.Context, in *SnapshotMaxSizeSetRequest, opts ...grpc.CallOption) (*SnapshotMaxSizeSetResponse, error) {
	out := new(SnapshotMaxSizeSetResponse)
	err := c.cc.Invoke(ctx, "/ptypes.ReplicaService/SnapshotMaxSizeSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicaServiceServer is the server API for ReplicaService service.
type ReplicaServiceServer interface {
	ReplicaCreate(context.Context, *ReplicaCreateRequest) (*ReplicaCreateResponse, error)
	ReplicaDelete(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ReplicaGet(context.Context, *emptypb.Empty) (*ReplicaGetResponse, error)
	ReplicaOpen(context.Context, *emptypb.Empty) (*ReplicaOpenResponse, error)
	ReplicaClose(context.Context, *emptypb.Empty) (*ReplicaCloseResponse, error)
	ReplicaReload(context.Context, *emptypb.Empty) (*ReplicaReloadResponse, error)
	ReplicaRevert(context.Context, *ReplicaRevertRequest) (*ReplicaRevertResponse, error)
	ReplicaSnapshot(context.Context, *ReplicaSnapshotRequest) (*ReplicaSnapshotResponse, error)
	ReplicaExpand(context.Context, *ReplicaExpandRequest) (*ReplicaExpandResponse, error)
	DiskRemove(context.Context, *DiskRemoveRequest) (*DiskRemoveResponse, error)
	DiskReplace(context.Context, *DiskReplaceRequest) (*DiskReplaceResponse, error)
	DiskPrepareRemove(context.Context, *DiskPrepareRemoveRequest) (*DiskPrepareRemoveResponse, error)
	DiskMarkAsRemoved(context.Context, *DiskMarkAsRemovedRequest) (*DiskMarkAsRemovedResponse, error)
	RebuildingSet(context.Context, *RebuildingSetRequest) (*RebuildingSetResponse, error)
	RevisionCounterSet(context.Context, *RevisionCounterSetRequest) (*RevisionCounterSetResponse, error)
	UnmapMarkDiskChainRemovedSet(context.Context, *UnmapMarkDiskChainRemovedSetRequest) (*UnmapMarkDiskChainRemovedSetResponse, error)
	SnapshotMaxCountSet(context.Context, *SnapshotMaxCountSetRequest) (*SnapshotMaxCountSetResponse, error)
	SnapshotMaxSizeSet(context.Context, *SnapshotMaxSizeSetRequest) (*SnapshotMaxSizeSetResponse, error)
}

// UnimplementedReplicaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReplicaServiceServer struct {
}

func (*UnimplementedReplicaServiceServer) ReplicaCreate(context.Context, *ReplicaCreateRequest) (*ReplicaCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaCreate not implemented")
}
func (*UnimplementedReplicaServiceServer) ReplicaDelete(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaDelete not implemented")
}
func (*UnimplementedReplicaServiceServer) ReplicaGet(context.Context, *emptypb.Empty) (*ReplicaGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaGet not implemented")
}
func (*UnimplementedReplicaServiceServer) ReplicaOpen(context.Context, *emptypb.Empty) (*ReplicaOpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaOpen not implemented")
}
func (*UnimplementedReplicaServiceServer) ReplicaClose(context.Context, *emptypb.Empty) (*ReplicaCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaClose not implemented")
}
func (*UnimplementedReplicaServiceServer) ReplicaReload(context.Context, *emptypb.Empty) (*ReplicaReloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaReload not implemented")
}
func (*UnimplementedReplicaServiceServer) ReplicaRevert(context.Context, *ReplicaRevertRequest) (*ReplicaRevertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaRevert not implemented")
}
func (*UnimplementedReplicaServiceServer) ReplicaSnapshot(context.Context, *ReplicaSnapshotRequest) (*ReplicaSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaSnapshot not implemented")
}
func (*UnimplementedReplicaServiceServer) ReplicaExpand(context.Context, *ReplicaExpandRequest) (*ReplicaExpandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaExpand not implemented")
}
func (*UnimplementedReplicaServiceServer) DiskRemove(context.Context, *DiskRemoveRequest) (*DiskRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiskRemove not implemented")
}
func (*UnimplementedReplicaServiceServer) DiskReplace(context.Context, *DiskReplaceRequest) (*DiskReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiskReplace not implemented")
}
func (*UnimplementedReplicaServiceServer) DiskPrepareRemove(context.Context, *DiskPrepareRemoveRequest) (*DiskPrepareRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiskPrepareRemove not implemented")
}
func (*UnimplementedReplicaServiceServer) DiskMarkAsRemoved(context.Context, *DiskMarkAsRemovedRequest) (*DiskMarkAsRemovedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiskMarkAsRemoved not implemented")
}
func (*UnimplementedReplicaServiceServer) RebuildingSet(context.Context, *RebuildingSetRequest) (*RebuildingSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildingSet not implemented")
}
func (*UnimplementedReplicaServiceServer) RevisionCounterSet(context.Context, *RevisionCounterSetRequest) (*RevisionCounterSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevisionCounterSet not implemented")
}
func (*UnimplementedReplicaServiceServer) UnmapMarkDiskChainRemovedSet(context.Context, *UnmapMarkDiskChainRemovedSetRequest) (*UnmapMarkDiskChainRemovedSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmapMarkDiskChainRemovedSet not implemented")
}
func (*UnimplementedReplicaServiceServer) SnapshotMaxCountSet(context.Context, *SnapshotMaxCountSetRequest) (*SnapshotMaxCountSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotMaxCountSet not implemented")
}
func (*UnimplementedReplicaServiceServer) SnapshotMaxSizeSet(context.Context, *SnapshotMaxSizeSetRequest) (*SnapshotMaxSizeSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotMaxSizeSet not implemented")
}

func RegisterReplicaServiceServer(s *grpc.Server, srv ReplicaServiceServer) {
	s.RegisterService(&_ReplicaService_serviceDesc, srv)
}

func _ReplicaService_ReplicaCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).ReplicaCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/ReplicaCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).ReplicaCreate(ctx, req.(*ReplicaCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_ReplicaDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).ReplicaDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/ReplicaDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).ReplicaDelete(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_ReplicaGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).ReplicaGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/ReplicaGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).ReplicaGet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_ReplicaOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).ReplicaOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/ReplicaOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).ReplicaOpen(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_ReplicaClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).ReplicaClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/ReplicaClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).ReplicaClose(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_ReplicaReload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).ReplicaReload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/ReplicaReload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).ReplicaReload(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_ReplicaRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).ReplicaRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/ReplicaRevert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).ReplicaRevert(ctx, req.(*ReplicaRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_ReplicaSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).ReplicaSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/ReplicaSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).ReplicaSnapshot(ctx, req.(*ReplicaSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_ReplicaExpand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaExpandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).ReplicaExpand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/ReplicaExpand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).ReplicaExpand(ctx, req.(*ReplicaExpandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_DiskRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).DiskRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/DiskRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).DiskRemove(ctx, req.(*DiskRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_DiskReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).DiskReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/DiskReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).DiskReplace(ctx, req.(*DiskReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_DiskPrepareRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskPrepareRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).DiskPrepareRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/DiskPrepareRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).DiskPrepareRemove(ctx, req.(*DiskPrepareRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_DiskMarkAsRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskMarkAsRemovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).DiskMarkAsRemoved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/DiskMarkAsRemoved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).DiskMarkAsRemoved(ctx, req.(*DiskMarkAsRemovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_RebuildingSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildingSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).RebuildingSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/RebuildingSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).RebuildingSet(ctx, req.(*RebuildingSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_RevisionCounterSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevisionCounterSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).RevisionCounterSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/RevisionCounterSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).RevisionCounterSet(ctx, req.(*RevisionCounterSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_UnmapMarkDiskChainRemovedSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmapMarkDiskChainRemovedSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).UnmapMarkDiskChainRemovedSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/UnmapMarkDiskChainRemovedSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).UnmapMarkDiskChainRemovedSet(ctx, req.(*UnmapMarkDiskChainRemovedSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_SnapshotMaxCountSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotMaxCountSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).SnapshotMaxCountSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/SnapshotMaxCountSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).SnapshotMaxCountSet(ctx, req.(*SnapshotMaxCountSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_SnapshotMaxSizeSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotMaxSizeSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).SnapshotMaxSizeSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.ReplicaService/SnapshotMaxSizeSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).SnapshotMaxSizeSet(ctx, req.(*SnapshotMaxSizeSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReplicaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ptypes.ReplicaService",
	HandlerType: (*ReplicaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplicaCreate",
			Handler:    _ReplicaService_ReplicaCreate_Handler,
		},
		{
			MethodName: "ReplicaDelete",
			Handler:    _ReplicaService_ReplicaDelete_Handler,
		},
		{
			MethodName: "ReplicaGet",
			Handler:    _ReplicaService_ReplicaGet_Handler,
		},
		{
			MethodName: "ReplicaOpen",
			Handler:    _ReplicaService_ReplicaOpen_Handler,
		},
		{
			MethodName: "ReplicaClose",
			Handler:    _ReplicaService_ReplicaClose_Handler,
		},
		{
			MethodName: "ReplicaReload",
			Handler:    _ReplicaService_ReplicaReload_Handler,
		},
		{
			MethodName: "ReplicaRevert",
			Handler:    _ReplicaService_ReplicaRevert_Handler,
		},
		{
			MethodName: "ReplicaSnapshot",
			Handler:    _ReplicaService_ReplicaSnapshot_Handler,
		},
		{
			MethodName: "ReplicaExpand",
			Handler:    _ReplicaService_ReplicaExpand_Handler,
		},
		{
			MethodName: "DiskRemove",
			Handler:    _ReplicaService_DiskRemove_Handler,
		},
		{
			MethodName: "DiskReplace",
			Handler:    _ReplicaService_DiskReplace_Handler,
		},
		{
			MethodName: "DiskPrepareRemove",
			Handler:    _ReplicaService_DiskPrepareRemove_Handler,
		},
		{
			MethodName: "DiskMarkAsRemoved",
			Handler:    _ReplicaService_DiskMarkAsRemoved_Handler,
		},
		{
			MethodName: "RebuildingSet",
			Handler:    _ReplicaService_RebuildingSet_Handler,
		},
		{
			MethodName: "RevisionCounterSet",
			Handler:    _ReplicaService_RevisionCounterSet_Handler,
		},
		{
			MethodName: "UnmapMarkDiskChainRemovedSet",
			Handler:    _ReplicaService_UnmapMarkDiskChainRemovedSet_Handler,
		},
		{
			MethodName: "SnapshotMaxCountSet",
			Handler:    _ReplicaService_SnapshotMaxCountSet_Handler,
		},
		{
			MethodName: "SnapshotMaxSizeSet",
			Handler:    _ReplicaService_SnapshotMaxSizeSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/longhorn/longhorn-engine/proto/ptypes/replica.proto",
}
