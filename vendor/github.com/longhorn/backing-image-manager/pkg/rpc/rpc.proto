syntax="proto3";

package longhorn.backingimagemanager.pkg.rpc;

import "google/protobuf/empty.proto";

option go_package = "github.com/longhorn/backing-image-manager/pkg/rpc";

service BackingImageManagerService {
	rpc Delete(DeleteRequest) returns (google.protobuf.Empty) {}
	rpc Get(GetRequest) returns (BackingImageResponse) {}
	rpc List(google.protobuf.Empty) returns (ListResponse) {}
	rpc VersionGet(google.protobuf.Empty) returns(VersionResponse);
	rpc Sync(SyncRequest) returns (BackingImageResponse) {}
	rpc Send(SendRequest) returns (google.protobuf.Empty) {}
	rpc Fetch(FetchRequest) returns (BackingImageResponse) {}
	rpc PrepareDownload(PrepareDownloadRequest) returns (PrepareDownloadResponse) {}
	rpc BackupCreate(BackupCreateRequest) returns (google.protobuf.Empty) {}
	rpc BackupStatus(BackupStatusRequest) returns (BackupStatusResponse) {}

	rpc Watch(google.protobuf.Empty) returns (stream google.protobuf.Empty) {}
}

message BackingImageSpec {
	string name = 1;
	string uuid = 2;
	int64 size = 3;
	string checksum = 4;
	int64 virtualSize = 5;
}

message BackingImageStatus {
	string state = 1;
	string error_msg = 2;
	int32 sending_reference = 3;
	string sender_manager_address = 4;
	int32 progress = 5;
	string checksum = 6;
}

message BackingImageResponse {
	BackingImageSpec spec = 1;
	BackingImageStatus status = 2;
}

message DeleteRequest {
	string name = 1;
	string uuid = 2;
}

message GetRequest {
	string name = 1;
	string uuid = 2;
}

message ListResponse{
	map<string, BackingImageResponse> backing_images = 1;
}

message VersionResponse {
	string version = 1;
	string gitCommit = 2;
	string buildDate = 3;

	int64 backing_image_manager_api_version = 4;
	int64 backing_image_manager_api_min_version = 5;
}

message SyncRequest {
	BackingImageSpec spec = 1;
	string from_address = 2;
}

message SendRequest {
	string name = 1;
	string uuid = 2;
	string to_address = 3;
}

message FetchRequest {
	BackingImageSpec spec = 1;
	string data_source_address = 2;
}

message PrepareDownloadRequest {
	string name = 1;
    string uuid = 2;
}

message PrepareDownloadResponse {
	string src_file_path = 1;
	string address = 2;
}

message BackupCreateRequest {
  string name = 1;
  string uuid = 2;
  string checksum = 3;
  string backup_target = 4;
  repeated string labels = 5;
  map<string, string> credential = 6;
  string compression_method = 7;
  int32 concurrent_limit = 8;
}

message BackupStatusRequest {
	string name = 1;
}

message BackupStatusResponse {
  int32 progress = 1;
  string backup_url = 2;
  string error = 3;
  string state = 4;
}
