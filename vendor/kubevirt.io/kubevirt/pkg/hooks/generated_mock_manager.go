// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -source manager.go -package=hooks -destination=generated_mock_manager.go
//

// Package hooks is a generated GoMock package.
package hooks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	v1 "kubevirt.io/api/core/v1"

	cloudinit "kubevirt.io/kubevirt/pkg/cloud-init"
	api "kubevirt.io/kubevirt/pkg/virt-launcher/virtwrap/api"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockManager) Collect(arg0 uint, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Collect indicates an expected call of Collect.
func (mr *MockManagerMockRecorder) Collect(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockManager)(nil).Collect), arg0, arg1)
}

// OnDefineDomain mocks base method.
func (m *MockManager) OnDefineDomain(arg0 *api.DomainSpec, arg1 *v1.VirtualMachineInstance) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnDefineDomain", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnDefineDomain indicates an expected call of OnDefineDomain.
func (mr *MockManagerMockRecorder) OnDefineDomain(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDefineDomain", reflect.TypeOf((*MockManager)(nil).OnDefineDomain), arg0, arg1)
}

// PreCloudInitIso mocks base method.
func (m *MockManager) PreCloudInitIso(arg0 *v1.VirtualMachineInstance, arg1 *cloudinit.CloudInitData) (*cloudinit.CloudInitData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreCloudInitIso", arg0, arg1)
	ret0, _ := ret[0].(*cloudinit.CloudInitData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreCloudInitIso indicates an expected call of PreCloudInitIso.
func (mr *MockManagerMockRecorder) PreCloudInitIso(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreCloudInitIso", reflect.TypeOf((*MockManager)(nil).PreCloudInitIso), arg0, arg1)
}

// Shutdown mocks base method.
func (m *MockManager) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockManagerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockManager)(nil).Shutdown))
}
