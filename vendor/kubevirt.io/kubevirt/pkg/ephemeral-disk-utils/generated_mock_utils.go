// Code generated by MockGen. DO NOT EDIT.
// Source: utils.go
//
// Generated by this command:
//
//	mockgen -source utils.go -package=ephemeraldiskutils -destination=generated_mock_utils.go
//

// Package ephemeraldiskutils is a generated GoMock package.
package ephemeraldiskutils

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	safepath "kubevirt.io/kubevirt/pkg/safepath"
)

// MockOwnershipManagerInterface is a mock of OwnershipManagerInterface interface.
type MockOwnershipManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOwnershipManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockOwnershipManagerInterfaceMockRecorder is the mock recorder for MockOwnershipManagerInterface.
type MockOwnershipManagerInterfaceMockRecorder struct {
	mock *MockOwnershipManagerInterface
}

// NewMockOwnershipManagerInterface creates a new mock instance.
func NewMockOwnershipManagerInterface(ctrl *gomock.Controller) *MockOwnershipManagerInterface {
	mock := &MockOwnershipManagerInterface{ctrl: ctrl}
	mock.recorder = &MockOwnershipManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnershipManagerInterface) EXPECT() *MockOwnershipManagerInterfaceMockRecorder {
	return m.recorder
}

// SetFileOwnership mocks base method.
func (m *MockOwnershipManagerInterface) SetFileOwnership(file *safepath.Path) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFileOwnership", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFileOwnership indicates an expected call of SetFileOwnership.
func (mr *MockOwnershipManagerInterfaceMockRecorder) SetFileOwnership(file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFileOwnership", reflect.TypeOf((*MockOwnershipManagerInterface)(nil).SetFileOwnership), file)
}

// UnsafeSetFileOwnership mocks base method.
func (m *MockOwnershipManagerInterface) UnsafeSetFileOwnership(file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsafeSetFileOwnership", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsafeSetFileOwnership indicates an expected call of UnsafeSetFileOwnership.
func (mr *MockOwnershipManagerInterfaceMockRecorder) UnsafeSetFileOwnership(file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsafeSetFileOwnership", reflect.TypeOf((*MockOwnershipManagerInterface)(nil).UnsafeSetFileOwnership), file)
}
