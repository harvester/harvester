// Code generated by MockGen. DO NOT EDIT.
// Source: nodetopologyupdater.go
//
// Generated by this command:
//
//	mockgen -source nodetopologyupdater.go -package=topology -destination=generated_mock_nodetopologyupdater.go
//

// Package topology is a generated GoMock package.
package topology

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockNodeTopologyUpdater is a mock of NodeTopologyUpdater interface.
type MockNodeTopologyUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockNodeTopologyUpdaterMockRecorder
	isgomock struct{}
}

// MockNodeTopologyUpdaterMockRecorder is the mock recorder for MockNodeTopologyUpdater.
type MockNodeTopologyUpdaterMockRecorder struct {
	mock *MockNodeTopologyUpdater
}

// NewMockNodeTopologyUpdater creates a new mock instance.
func NewMockNodeTopologyUpdater(ctrl *gomock.Controller) *MockNodeTopologyUpdater {
	mock := &MockNodeTopologyUpdater{ctrl: ctrl}
	mock.recorder = &MockNodeTopologyUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeTopologyUpdater) EXPECT() *MockNodeTopologyUpdaterMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockNodeTopologyUpdater) Run(interval time.Duration, stopChan <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", interval, stopChan)
}

// Run indicates an expected call of Run.
func (mr *MockNodeTopologyUpdaterMockRecorder) Run(interval, stopChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockNodeTopologyUpdater)(nil).Run), interval, stopChan)
}
