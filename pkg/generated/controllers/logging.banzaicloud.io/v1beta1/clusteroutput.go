/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1beta1

import (
	"context"
	"time"

	v1beta1 "github.com/banzaicloud/logging-operator/pkg/sdk/logging/api/v1beta1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type ClusterOutputHandler func(string, *v1beta1.ClusterOutput) (*v1beta1.ClusterOutput, error)

type ClusterOutputController interface {
	generic.ControllerMeta
	ClusterOutputClient

	OnChange(ctx context.Context, name string, sync ClusterOutputHandler)
	OnRemove(ctx context.Context, name string, sync ClusterOutputHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() ClusterOutputCache
}

type ClusterOutputClient interface {
	Create(*v1beta1.ClusterOutput) (*v1beta1.ClusterOutput, error)
	Update(*v1beta1.ClusterOutput) (*v1beta1.ClusterOutput, error)
	UpdateStatus(*v1beta1.ClusterOutput) (*v1beta1.ClusterOutput, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1beta1.ClusterOutput, error)
	List(namespace string, opts metav1.ListOptions) (*v1beta1.ClusterOutputList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ClusterOutput, err error)
}

type ClusterOutputCache interface {
	Get(namespace, name string) (*v1beta1.ClusterOutput, error)
	List(namespace string, selector labels.Selector) ([]*v1beta1.ClusterOutput, error)

	AddIndexer(indexName string, indexer ClusterOutputIndexer)
	GetByIndex(indexName, key string) ([]*v1beta1.ClusterOutput, error)
}

type ClusterOutputIndexer func(obj *v1beta1.ClusterOutput) ([]string, error)

type clusterOutputController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewClusterOutputController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) ClusterOutputController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &clusterOutputController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromClusterOutputHandlerToHandler(sync ClusterOutputHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1beta1.ClusterOutput
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1beta1.ClusterOutput))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *clusterOutputController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1beta1.ClusterOutput))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateClusterOutputDeepCopyOnChange(client ClusterOutputClient, obj *v1beta1.ClusterOutput, handler func(obj *v1beta1.ClusterOutput) (*v1beta1.ClusterOutput, error)) (*v1beta1.ClusterOutput, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *clusterOutputController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *clusterOutputController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *clusterOutputController) OnChange(ctx context.Context, name string, sync ClusterOutputHandler) {
	c.AddGenericHandler(ctx, name, FromClusterOutputHandlerToHandler(sync))
}

func (c *clusterOutputController) OnRemove(ctx context.Context, name string, sync ClusterOutputHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromClusterOutputHandlerToHandler(sync)))
}

func (c *clusterOutputController) Enqueue(namespace, name string) {
	c.controller.Enqueue(namespace, name)
}

func (c *clusterOutputController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controller.EnqueueAfter(namespace, name, duration)
}

func (c *clusterOutputController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *clusterOutputController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *clusterOutputController) Cache() ClusterOutputCache {
	return &clusterOutputCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *clusterOutputController) Create(obj *v1beta1.ClusterOutput) (*v1beta1.ClusterOutput, error) {
	result := &v1beta1.ClusterOutput{}
	return result, c.client.Create(context.TODO(), obj.Namespace, obj, result, metav1.CreateOptions{})
}

func (c *clusterOutputController) Update(obj *v1beta1.ClusterOutput) (*v1beta1.ClusterOutput, error) {
	result := &v1beta1.ClusterOutput{}
	return result, c.client.Update(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *clusterOutputController) UpdateStatus(obj *v1beta1.ClusterOutput) (*v1beta1.ClusterOutput, error) {
	result := &v1beta1.ClusterOutput{}
	return result, c.client.UpdateStatus(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *clusterOutputController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), namespace, name, *options)
}

func (c *clusterOutputController) Get(namespace, name string, options metav1.GetOptions) (*v1beta1.ClusterOutput, error) {
	result := &v1beta1.ClusterOutput{}
	return result, c.client.Get(context.TODO(), namespace, name, result, options)
}

func (c *clusterOutputController) List(namespace string, opts metav1.ListOptions) (*v1beta1.ClusterOutputList, error) {
	result := &v1beta1.ClusterOutputList{}
	return result, c.client.List(context.TODO(), namespace, result, opts)
}

func (c *clusterOutputController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), namespace, opts)
}

func (c *clusterOutputController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1.ClusterOutput, error) {
	result := &v1beta1.ClusterOutput{}
	return result, c.client.Patch(context.TODO(), namespace, name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type clusterOutputCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *clusterOutputCache) Get(namespace, name string) (*v1beta1.ClusterOutput, error) {
	obj, exists, err := c.indexer.GetByKey(namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1beta1.ClusterOutput), nil
}

func (c *clusterOutputCache) List(namespace string, selector labels.Selector) (ret []*v1beta1.ClusterOutput, err error) {

	err = cache.ListAllByNamespace(c.indexer, namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ClusterOutput))
	})

	return ret, err
}

func (c *clusterOutputCache) AddIndexer(indexName string, indexer ClusterOutputIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1beta1.ClusterOutput))
		},
	}))
}

func (c *clusterOutputCache) GetByIndex(indexName, key string) (result []*v1beta1.ClusterOutput, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1beta1.ClusterOutput, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1beta1.ClusterOutput))
	}
	return result, nil
}

type ClusterOutputStatusHandler func(obj *v1beta1.ClusterOutput, status v1beta1.OutputStatus) (v1beta1.OutputStatus, error)

type ClusterOutputGeneratingHandler func(obj *v1beta1.ClusterOutput, status v1beta1.OutputStatus) ([]runtime.Object, v1beta1.OutputStatus, error)

func RegisterClusterOutputStatusHandler(ctx context.Context, controller ClusterOutputController, condition condition.Cond, name string, handler ClusterOutputStatusHandler) {
	statusHandler := &clusterOutputStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromClusterOutputHandlerToHandler(statusHandler.sync))
}

func RegisterClusterOutputGeneratingHandler(ctx context.Context, controller ClusterOutputController, apply apply.Apply,
	condition condition.Cond, name string, handler ClusterOutputGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &clusterOutputGeneratingHandler{
		ClusterOutputGeneratingHandler: handler,
		apply:                          apply,
		name:                           name,
		gvk:                            controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterClusterOutputStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type clusterOutputStatusHandler struct {
	client    ClusterOutputClient
	condition condition.Cond
	handler   ClusterOutputStatusHandler
}

func (a *clusterOutputStatusHandler) sync(key string, obj *v1beta1.ClusterOutput) (*v1beta1.ClusterOutput, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type clusterOutputGeneratingHandler struct {
	ClusterOutputGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *clusterOutputGeneratingHandler) Remove(key string, obj *v1beta1.ClusterOutput) (*v1beta1.ClusterOutput, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1beta1.ClusterOutput{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *clusterOutputGeneratingHandler) Handle(obj *v1beta1.ClusterOutput, status v1beta1.OutputStatus) (v1beta1.OutputStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.ClusterOutputGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
