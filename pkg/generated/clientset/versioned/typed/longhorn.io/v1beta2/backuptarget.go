/*
Copyright 2025 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1beta2

import (
	"context"

	scheme "github.com/harvester/harvester/pkg/generated/clientset/versioned/scheme"
	v1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// BackupTargetsGetter has a method to return a BackupTargetInterface.
// A group's client should implement this interface.
type BackupTargetsGetter interface {
	BackupTargets(namespace string) BackupTargetInterface
}

// BackupTargetInterface has methods to work with BackupTarget resources.
type BackupTargetInterface interface {
	Create(ctx context.Context, backupTarget *v1beta2.BackupTarget, opts v1.CreateOptions) (*v1beta2.BackupTarget, error)
	Update(ctx context.Context, backupTarget *v1beta2.BackupTarget, opts v1.UpdateOptions) (*v1beta2.BackupTarget, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, backupTarget *v1beta2.BackupTarget, opts v1.UpdateOptions) (*v1beta2.BackupTarget, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1beta2.BackupTarget, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1beta2.BackupTargetList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta2.BackupTarget, err error)
	BackupTargetExpansion
}

// backupTargets implements BackupTargetInterface
type backupTargets struct {
	*gentype.ClientWithList[*v1beta2.BackupTarget, *v1beta2.BackupTargetList]
}

// newBackupTargets returns a BackupTargets
func newBackupTargets(c *LonghornV1beta2Client, namespace string) *backupTargets {
	return &backupTargets{
		gentype.NewClientWithList[*v1beta2.BackupTarget, *v1beta2.BackupTargetList](
			"backuptargets",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1beta2.BackupTarget { return &v1beta2.BackupTarget{} },
			func() *v1beta2.BackupTargetList { return &v1beta2.BackupTargetList{} }),
	}
}
