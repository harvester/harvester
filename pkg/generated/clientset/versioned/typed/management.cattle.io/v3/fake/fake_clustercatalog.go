/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package fake

import (
	"context"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeClusterCatalogs implements ClusterCatalogInterface
type FakeClusterCatalogs struct {
	Fake *FakeManagementV3
	ns   string
}

var clustercatalogsResource = schema.GroupVersionResource{Group: "management.cattle.io", Version: "v3", Resource: "clustercatalogs"}

var clustercatalogsKind = schema.GroupVersionKind{Group: "management.cattle.io", Version: "v3", Kind: "ClusterCatalog"}

// Get takes name of the clusterCatalog, and returns the corresponding clusterCatalog object, and an error if there is any.
func (c *FakeClusterCatalogs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v3.ClusterCatalog, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(clustercatalogsResource, c.ns, name), &v3.ClusterCatalog{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v3.ClusterCatalog), err
}

// List takes label and field selectors, and returns the list of ClusterCatalogs that match those selectors.
func (c *FakeClusterCatalogs) List(ctx context.Context, opts v1.ListOptions) (result *v3.ClusterCatalogList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(clustercatalogsResource, clustercatalogsKind, c.ns, opts), &v3.ClusterCatalogList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v3.ClusterCatalogList), err
}

// Watch returns a watch.Interface that watches the requested clusterCatalogs.
func (c *FakeClusterCatalogs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(clustercatalogsResource, c.ns, opts))

}

// Create takes the representation of a clusterCatalog and creates it.  Returns the server's representation of the clusterCatalog, and an error, if there is any.
func (c *FakeClusterCatalogs) Create(ctx context.Context, clusterCatalog *v3.ClusterCatalog, opts v1.CreateOptions) (result *v3.ClusterCatalog, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(clustercatalogsResource, c.ns, clusterCatalog), &v3.ClusterCatalog{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v3.ClusterCatalog), err
}

// Update takes the representation of a clusterCatalog and updates it. Returns the server's representation of the clusterCatalog, and an error, if there is any.
func (c *FakeClusterCatalogs) Update(ctx context.Context, clusterCatalog *v3.ClusterCatalog, opts v1.UpdateOptions) (result *v3.ClusterCatalog, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(clustercatalogsResource, c.ns, clusterCatalog), &v3.ClusterCatalog{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v3.ClusterCatalog), err
}

// Delete takes name of the clusterCatalog and deletes it. Returns an error if one occurs.
func (c *FakeClusterCatalogs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(clustercatalogsResource, c.ns, name, opts), &v3.ClusterCatalog{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeClusterCatalogs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(clustercatalogsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v3.ClusterCatalogList{})
	return err
}

// Patch applies the patch and returns the patched clusterCatalog.
func (c *FakeClusterCatalogs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v3.ClusterCatalog, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(clustercatalogsResource, c.ns, name, pt, data, subresources...), &v3.ClusterCatalog{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v3.ClusterCatalog), err
}
