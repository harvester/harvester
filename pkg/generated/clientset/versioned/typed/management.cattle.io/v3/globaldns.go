/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	scheme "github.com/harvester/harvester/pkg/generated/clientset/versioned/scheme"
	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// GlobalDnsesGetter has a method to return a GlobalDnsInterface.
// A group's client should implement this interface.
type GlobalDnsesGetter interface {
	GlobalDnses(namespace string) GlobalDnsInterface
}

// GlobalDnsInterface has methods to work with GlobalDns resources.
type GlobalDnsInterface interface {
	Create(ctx context.Context, globalDns *v3.GlobalDns, opts v1.CreateOptions) (*v3.GlobalDns, error)
	Update(ctx context.Context, globalDns *v3.GlobalDns, opts v1.UpdateOptions) (*v3.GlobalDns, error)
	UpdateStatus(ctx context.Context, globalDns *v3.GlobalDns, opts v1.UpdateOptions) (*v3.GlobalDns, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v3.GlobalDns, error)
	List(ctx context.Context, opts v1.ListOptions) (*v3.GlobalDnsList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v3.GlobalDns, err error)
	GlobalDnsExpansion
}

// globalDnses implements GlobalDnsInterface
type globalDnses struct {
	client rest.Interface
	ns     string
}

// newGlobalDnses returns a GlobalDnses
func newGlobalDnses(c *ManagementV3Client, namespace string) *globalDnses {
	return &globalDnses{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the globalDns, and returns the corresponding globalDns object, and an error if there is any.
func (c *globalDnses) Get(ctx context.Context, name string, options v1.GetOptions) (result *v3.GlobalDns, err error) {
	result = &v3.GlobalDns{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("globaldnses").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of GlobalDnses that match those selectors.
func (c *globalDnses) List(ctx context.Context, opts v1.ListOptions) (result *v3.GlobalDnsList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v3.GlobalDnsList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("globaldnses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested globalDnses.
func (c *globalDnses) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("globaldnses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a globalDns and creates it.  Returns the server's representation of the globalDns, and an error, if there is any.
func (c *globalDnses) Create(ctx context.Context, globalDns *v3.GlobalDns, opts v1.CreateOptions) (result *v3.GlobalDns, err error) {
	result = &v3.GlobalDns{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("globaldnses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(globalDns).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a globalDns and updates it. Returns the server's representation of the globalDns, and an error, if there is any.
func (c *globalDnses) Update(ctx context.Context, globalDns *v3.GlobalDns, opts v1.UpdateOptions) (result *v3.GlobalDns, err error) {
	result = &v3.GlobalDns{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("globaldnses").
		Name(globalDns.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(globalDns).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *globalDnses) UpdateStatus(ctx context.Context, globalDns *v3.GlobalDns, opts v1.UpdateOptions) (result *v3.GlobalDns, err error) {
	result = &v3.GlobalDns{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("globaldnses").
		Name(globalDns.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(globalDns).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the globalDns and deletes it. Returns an error if one occurs.
func (c *globalDnses) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("globaldnses").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *globalDnses) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("globaldnses").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched globalDns.
func (c *globalDnses) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v3.GlobalDns, err error) {
	result = &v3.GlobalDns{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("globaldnses").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
