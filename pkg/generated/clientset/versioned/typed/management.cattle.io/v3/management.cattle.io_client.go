/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"net/http"

	"github.com/harvester/harvester/pkg/generated/clientset/versioned/scheme"
	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	rest "k8s.io/client-go/rest"
)

type ManagementV3Interface interface {
	RESTClient() rest.Interface
	APIServicesGetter
	ActiveDirectoryProvidersGetter
	AuthConfigsGetter
	AuthProvidersGetter
	AuthTokensGetter
	AzureADProvidersGetter
	CatalogsGetter
	CatalogTemplatesGetter
	CatalogTemplateVersionsGetter
	CisBenchmarkVersionsGetter
	CisConfigsGetter
	CloudCredentialsGetter
	ClustersGetter
	ClusterAlertsGetter
	ClusterAlertGroupsGetter
	ClusterAlertRulesGetter
	ClusterCatalogsGetter
	ClusterLoggingsGetter
	ClusterMonitorGraphsGetter
	ClusterRegistrationTokensGetter
	ClusterRoleTemplateBindingsGetter
	ClusterScansGetter
	ClusterTemplatesGetter
	ClusterTemplateRevisionsGetter
	ComposeConfigsGetter
	DynamicSchemasGetter
	EtcdBackupsGetter
	FeaturesGetter
	FleetWorkspacesGetter
	FreeIpaProvidersGetter
	GithubConfigsGetter
	GithubProvidersGetter
	GlobalDnsesGetter
	GlobalDnsProvidersGetter
	GlobalRolesGetter
	GlobalRoleBindingsGetter
	GoogleOAuthProvidersGetter
	GroupsGetter
	GroupMembersGetter
	KontainerDriversGetter
	LocalProvidersGetter
	ManagedChartsGetter
	MonitorMetricsGetter
	MultiClusterAppsGetter
	MultiClusterAppRevisionsGetter
	NodesGetter
	NodeDriversGetter
	NodePoolsGetter
	NodeTemplatesGetter
	NotifiersGetter
	OIDCProvidersGetter
	OpenLdapProvidersGetter
	PodSecurityPolicyTemplatesGetter
	PodSecurityPolicyTemplateProjectBindingsGetter
	PreferencesGetter
	PrincipalsGetter
	ProjectsGetter
	ProjectAlertsGetter
	ProjectAlertGroupsGetter
	ProjectAlertRulesGetter
	ProjectCatalogsGetter
	ProjectLoggingsGetter
	ProjectMonitorGraphsGetter
	ProjectNetworkPoliciesGetter
	ProjectRoleTemplateBindingsGetter
	RancherUserNotificationsGetter
	RkeAddonsGetter
	RkeK8sServiceOptionsGetter
	RkeK8sSystemImagesGetter
	RoleTemplatesGetter
	SamlProvidersGetter
	SamlTokensGetter
	SettingsGetter
	TemplatesGetter
	TemplateContentsGetter
	TemplateVersionsGetter
	TokensGetter
	UsersGetter
	UserAttributesGetter
}

// ManagementV3Client is used to interact with features provided by the management.cattle.io group.
type ManagementV3Client struct {
	restClient rest.Interface
}

func (c *ManagementV3Client) APIServices() APIServiceInterface {
	return newAPIServices(c)
}

func (c *ManagementV3Client) ActiveDirectoryProviders() ActiveDirectoryProviderInterface {
	return newActiveDirectoryProviders(c)
}

func (c *ManagementV3Client) AuthConfigs() AuthConfigInterface {
	return newAuthConfigs(c)
}

func (c *ManagementV3Client) AuthProviders() AuthProviderInterface {
	return newAuthProviders(c)
}

func (c *ManagementV3Client) AuthTokens() AuthTokenInterface {
	return newAuthTokens(c)
}

func (c *ManagementV3Client) AzureADProviders() AzureADProviderInterface {
	return newAzureADProviders(c)
}

func (c *ManagementV3Client) Catalogs() CatalogInterface {
	return newCatalogs(c)
}

func (c *ManagementV3Client) CatalogTemplates(namespace string) CatalogTemplateInterface {
	return newCatalogTemplates(c, namespace)
}

func (c *ManagementV3Client) CatalogTemplateVersions(namespace string) CatalogTemplateVersionInterface {
	return newCatalogTemplateVersions(c, namespace)
}

func (c *ManagementV3Client) CisBenchmarkVersions(namespace string) CisBenchmarkVersionInterface {
	return newCisBenchmarkVersions(c, namespace)
}

func (c *ManagementV3Client) CisConfigs(namespace string) CisConfigInterface {
	return newCisConfigs(c, namespace)
}

func (c *ManagementV3Client) CloudCredentials(namespace string) CloudCredentialInterface {
	return newCloudCredentials(c, namespace)
}

func (c *ManagementV3Client) Clusters() ClusterInterface {
	return newClusters(c)
}

func (c *ManagementV3Client) ClusterAlerts(namespace string) ClusterAlertInterface {
	return newClusterAlerts(c, namespace)
}

func (c *ManagementV3Client) ClusterAlertGroups(namespace string) ClusterAlertGroupInterface {
	return newClusterAlertGroups(c, namespace)
}

func (c *ManagementV3Client) ClusterAlertRules(namespace string) ClusterAlertRuleInterface {
	return newClusterAlertRules(c, namespace)
}

func (c *ManagementV3Client) ClusterCatalogs(namespace string) ClusterCatalogInterface {
	return newClusterCatalogs(c, namespace)
}

func (c *ManagementV3Client) ClusterLoggings(namespace string) ClusterLoggingInterface {
	return newClusterLoggings(c, namespace)
}

func (c *ManagementV3Client) ClusterMonitorGraphs(namespace string) ClusterMonitorGraphInterface {
	return newClusterMonitorGraphs(c, namespace)
}

func (c *ManagementV3Client) ClusterRegistrationTokens(namespace string) ClusterRegistrationTokenInterface {
	return newClusterRegistrationTokens(c, namespace)
}

func (c *ManagementV3Client) ClusterRoleTemplateBindings(namespace string) ClusterRoleTemplateBindingInterface {
	return newClusterRoleTemplateBindings(c, namespace)
}

func (c *ManagementV3Client) ClusterScans(namespace string) ClusterScanInterface {
	return newClusterScans(c, namespace)
}

func (c *ManagementV3Client) ClusterTemplates(namespace string) ClusterTemplateInterface {
	return newClusterTemplates(c, namespace)
}

func (c *ManagementV3Client) ClusterTemplateRevisions(namespace string) ClusterTemplateRevisionInterface {
	return newClusterTemplateRevisions(c, namespace)
}

func (c *ManagementV3Client) ComposeConfigs() ComposeConfigInterface {
	return newComposeConfigs(c)
}

func (c *ManagementV3Client) DynamicSchemas() DynamicSchemaInterface {
	return newDynamicSchemas(c)
}

func (c *ManagementV3Client) EtcdBackups(namespace string) EtcdBackupInterface {
	return newEtcdBackups(c, namespace)
}

func (c *ManagementV3Client) Features() FeatureInterface {
	return newFeatures(c)
}

func (c *ManagementV3Client) FleetWorkspaces() FleetWorkspaceInterface {
	return newFleetWorkspaces(c)
}

func (c *ManagementV3Client) FreeIpaProviders() FreeIpaProviderInterface {
	return newFreeIpaProviders(c)
}

func (c *ManagementV3Client) GithubConfigs() GithubConfigInterface {
	return newGithubConfigs(c)
}

func (c *ManagementV3Client) GithubProviders() GithubProviderInterface {
	return newGithubProviders(c)
}

func (c *ManagementV3Client) GlobalDnses(namespace string) GlobalDnsInterface {
	return newGlobalDnses(c, namespace)
}

func (c *ManagementV3Client) GlobalDnsProviders(namespace string) GlobalDnsProviderInterface {
	return newGlobalDnsProviders(c, namespace)
}

func (c *ManagementV3Client) GlobalRoles() GlobalRoleInterface {
	return newGlobalRoles(c)
}

func (c *ManagementV3Client) GlobalRoleBindings() GlobalRoleBindingInterface {
	return newGlobalRoleBindings(c)
}

func (c *ManagementV3Client) GoogleOAuthProviders() GoogleOAuthProviderInterface {
	return newGoogleOAuthProviders(c)
}

func (c *ManagementV3Client) Groups() GroupInterface {
	return newGroups(c)
}

func (c *ManagementV3Client) GroupMembers() GroupMemberInterface {
	return newGroupMembers(c)
}

func (c *ManagementV3Client) KontainerDrivers() KontainerDriverInterface {
	return newKontainerDrivers(c)
}

func (c *ManagementV3Client) LocalProviders() LocalProviderInterface {
	return newLocalProviders(c)
}

func (c *ManagementV3Client) ManagedCharts(namespace string) ManagedChartInterface {
	return newManagedCharts(c, namespace)
}

func (c *ManagementV3Client) MonitorMetrics(namespace string) MonitorMetricInterface {
	return newMonitorMetrics(c, namespace)
}

func (c *ManagementV3Client) MultiClusterApps(namespace string) MultiClusterAppInterface {
	return newMultiClusterApps(c, namespace)
}

func (c *ManagementV3Client) MultiClusterAppRevisions(namespace string) MultiClusterAppRevisionInterface {
	return newMultiClusterAppRevisions(c, namespace)
}

func (c *ManagementV3Client) Nodes(namespace string) NodeInterface {
	return newNodes(c, namespace)
}

func (c *ManagementV3Client) NodeDrivers() NodeDriverInterface {
	return newNodeDrivers(c)
}

func (c *ManagementV3Client) NodePools(namespace string) NodePoolInterface {
	return newNodePools(c, namespace)
}

func (c *ManagementV3Client) NodeTemplates(namespace string) NodeTemplateInterface {
	return newNodeTemplates(c, namespace)
}

func (c *ManagementV3Client) Notifiers(namespace string) NotifierInterface {
	return newNotifiers(c, namespace)
}

func (c *ManagementV3Client) OIDCProviders() OIDCProviderInterface {
	return newOIDCProviders(c)
}

func (c *ManagementV3Client) OpenLdapProviders() OpenLdapProviderInterface {
	return newOpenLdapProviders(c)
}

func (c *ManagementV3Client) PodSecurityPolicyTemplates() PodSecurityPolicyTemplateInterface {
	return newPodSecurityPolicyTemplates(c)
}

func (c *ManagementV3Client) PodSecurityPolicyTemplateProjectBindings(namespace string) PodSecurityPolicyTemplateProjectBindingInterface {
	return newPodSecurityPolicyTemplateProjectBindings(c, namespace)
}

func (c *ManagementV3Client) Preferences(namespace string) PreferenceInterface {
	return newPreferences(c, namespace)
}

func (c *ManagementV3Client) Principals() PrincipalInterface {
	return newPrincipals(c)
}

func (c *ManagementV3Client) Projects(namespace string) ProjectInterface {
	return newProjects(c, namespace)
}

func (c *ManagementV3Client) ProjectAlerts(namespace string) ProjectAlertInterface {
	return newProjectAlerts(c, namespace)
}

func (c *ManagementV3Client) ProjectAlertGroups(namespace string) ProjectAlertGroupInterface {
	return newProjectAlertGroups(c, namespace)
}

func (c *ManagementV3Client) ProjectAlertRules(namespace string) ProjectAlertRuleInterface {
	return newProjectAlertRules(c, namespace)
}

func (c *ManagementV3Client) ProjectCatalogs(namespace string) ProjectCatalogInterface {
	return newProjectCatalogs(c, namespace)
}

func (c *ManagementV3Client) ProjectLoggings(namespace string) ProjectLoggingInterface {
	return newProjectLoggings(c, namespace)
}

func (c *ManagementV3Client) ProjectMonitorGraphs(namespace string) ProjectMonitorGraphInterface {
	return newProjectMonitorGraphs(c, namespace)
}

func (c *ManagementV3Client) ProjectNetworkPolicies(namespace string) ProjectNetworkPolicyInterface {
	return newProjectNetworkPolicies(c, namespace)
}

func (c *ManagementV3Client) ProjectRoleTemplateBindings(namespace string) ProjectRoleTemplateBindingInterface {
	return newProjectRoleTemplateBindings(c, namespace)
}

func (c *ManagementV3Client) RancherUserNotifications() RancherUserNotificationInterface {
	return newRancherUserNotifications(c)
}

func (c *ManagementV3Client) RkeAddons(namespace string) RkeAddonInterface {
	return newRkeAddons(c, namespace)
}

func (c *ManagementV3Client) RkeK8sServiceOptions(namespace string) RkeK8sServiceOptionInterface {
	return newRkeK8sServiceOptions(c, namespace)
}

func (c *ManagementV3Client) RkeK8sSystemImages(namespace string) RkeK8sSystemImageInterface {
	return newRkeK8sSystemImages(c, namespace)
}

func (c *ManagementV3Client) RoleTemplates() RoleTemplateInterface {
	return newRoleTemplates(c)
}

func (c *ManagementV3Client) SamlProviders() SamlProviderInterface {
	return newSamlProviders(c)
}

func (c *ManagementV3Client) SamlTokens() SamlTokenInterface {
	return newSamlTokens(c)
}

func (c *ManagementV3Client) Settings() SettingInterface {
	return newSettings(c)
}

func (c *ManagementV3Client) Templates() TemplateInterface {
	return newTemplates(c)
}

func (c *ManagementV3Client) TemplateContents() TemplateContentInterface {
	return newTemplateContents(c)
}

func (c *ManagementV3Client) TemplateVersions() TemplateVersionInterface {
	return newTemplateVersions(c)
}

func (c *ManagementV3Client) Tokens() TokenInterface {
	return newTokens(c)
}

func (c *ManagementV3Client) Users() UserInterface {
	return newUsers(c)
}

func (c *ManagementV3Client) UserAttributes() UserAttributeInterface {
	return newUserAttributes(c)
}

// NewForConfig creates a new ManagementV3Client for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*ManagementV3Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	httpClient, err := rest.HTTPClientFor(&config)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(&config, httpClient)
}

// NewForConfigAndClient creates a new ManagementV3Client for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h *http.Client) (*ManagementV3Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientForConfigAndClient(&config, h)
	if err != nil {
		return nil, err
	}
	return &ManagementV3Client{client}, nil
}

// NewForConfigOrDie creates a new ManagementV3Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *ManagementV3Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new ManagementV3Client for the given RESTClient.
func New(c rest.Interface) *ManagementV3Client {
	return &ManagementV3Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v3.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *ManagementV3Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
