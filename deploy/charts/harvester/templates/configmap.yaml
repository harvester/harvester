apiVersion: v1
kind: ConfigMap
metadata:
  name: vip
data:
  enabled: {{ .Values.service.vip.enabled | quote }}
  serviceType: {{ .Values.service.vip.type }}
  ip: {{ .Values.service.vip.ip | quote }}
  mode: {{ .Values.service.vip.mode }}
  hwAddress: {{ .Values.service.vip.hwAddress | quote }}
  loadBalancerIP: {{ .Values.service.vip.loadBalancerIP | quote }}

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: harvester-helpers
  labels:
{{ include "harvester.labels" . | indent 4 }}
data:
  promote.sh: |-
    {{`KUBECTL="/host/$(readlink /host/var/lib/rancher/rke2/bin)/kubectl"
    YQ="/host/usr/bin/yq"
    ROLE_LABELS="rke.cattle.io/control-plane-role=true rke.cattle.io/etcd-role=true"
    ETCD_ONLY=false
    if [[ -n "$1" && $1 == "rke.cattle.io/etcd-role=true" ]]; then
      ETCD_ONLY=true
      ROLE_LABELS=$1
    fi

    case $ROLE_LABELS in
      "rke.cattle.io/control-plane-role=true rke.cattle.io/etcd-role=true" | "rke.cattle.io/etcd-role=true")
    ;;
      *)
      echo "ROLE $ROLE_LABELS is not supported."
      exit 1
    ;;
    esac

    get_machine_from_node() {
      $KUBECTL get node $HARVESTER_PROMOTE_NODE_NAME -o jsonpath='{.metadata.annotations.cluster\.x-k8s\.io/machine}'
    }

    # Wait for rancher-webhook ready. It's default to one replica.
    # Otherwise lebeling capi resources later might fail.
    $KUBECTL rollout status --watch=true deployment rancher-webhook -n cattle-system
    # https://github.com/rancher/webhook/blob/436e359b136b633cb1a6fa7cdedbed4d74821bdb/pkg/server/server.go#L114
    sleep 20

    CUSTOM_MACHINE=$(get_machine_from_node)
    until [ -n "$CUSTOM_MACHINE" ]
    do
      echo Waiting for custom machine label of $HARVESTER_PROMOTE_NODE_NAME ...
      sleep 2
      CUSTOM_MACHINE=$(get_machine_from_node)
    done

    until $KUBECTL get machines.cluster.x-k8s.io $CUSTOM_MACHINE -n fleet-local &> /dev/null
    do
      echo Waiting for custom machine $CUSTOM_MACHINE...
      sleep 2
    done

    PLAN_SECRET="${CUSTOM_MACHINE}-machine-plan"
    until $KUBECTL get secret $PLAN_SECRET -n fleet-local &> /dev/null
    do
      echo Waiting for machine plan of $CUSTOM_MACHINE...
      sleep 2
    done

    until $KUBECTL get rkebootstraps.rke.cattle.io "${CUSTOM_MACHINE}" -n fleet-local &> /dev/null
    do
      echo Waiting for bootstrap object of $CUSTOM_MACHINE...
      sleep 2
    done

    VIP=$($KUBECTL get configmap vip -n harvester-system -o=jsonpath='{.data.ip}')
    cat > /host/etc/rancher/rke2/config.yaml.d/90-harvester-server.yaml <<EOF
    cni: multus,canal
    cluster-cidr: 10.52.0.0/16
    service-cidr: 10.53.0.0/16
    cluster-dns: 10.53.0.10
    tls-san:
      - $VIP
    audit-policy-file: /etc/rancher/rke2/config.yaml.d/92-harvester-kube-audit-policy.yaml
    EOF

    # Disable snapshot-controller related charts because we manage them in Harvester.
    # RKE2 enables these charts by default after v1.25.7 (https://github.com/rancher/rke2/releases/tag/v1.25.7%2Brke2r1)
    cat > /host/etc/rancher/rke2/config.yaml.d/40-disable-charts.yaml <<EOF
    disable:
    - rke2-snapshot-controller
    - rke2-snapshot-controller-crd
    - rke2-snapshot-validation-webhook
    EOF

    # make sure we should not have any related label/taint on the node
    if [[ $ETCD_ONLY == false ]]; then
      found=$($KUBECTL get node $HOSTNAME -o yaml | $YQ '.spec.taints[] | select (.effect == "NoSchedule" and .key == "node-role.kubernetes.io/etcd=true") | .effect')
      if [[ -n $found ]]
      then
        $KUBECTL taint nodes $HOSTNAME node-role.kubernetes.io/etcd=true:NoExecute-
      fi
      $KUBECTL label --overwrite nodes $HOSTNAME node-role.harvesterhci.io/witness-
    fi

    # For how to promote nodes, see: https://github.com/rancher/rancher/issues/36480#issuecomment-1039253499
    $KUBECTL label --overwrite -n fleet-local machines.cluster.x-k8s.io $CUSTOM_MACHINE $ROLE_LABELS
    $KUBECTL label --overwrite -n fleet-local machines.cluster.x-k8s.io $CUSTOM_MACHINE cluster.x-k8s.io/control-plane=true
    $KUBECTL label --overwrite -n fleet-local secret $PLAN_SECRET $ROLE_LABELS
    $KUBECTL label --overwrite -n fleet-local rkebootstraps.rke.cattle.io $CUSTOM_MACHINE $ROLE_LABELS

    kickout_longhorn_node()
    {
      target=$1
      found=$($KUBECTL get nodes.longhorn.io -n longhorn-system |grep -q $target && echo true || echo false)
      if [[ $found == true ]]; then
        echo "Found longhorn node $target, kicking it out..."
        $KUBECTL delete nodes.longhorn.io $target -n longhorn-system
      fi
    }

    while true
    do
      if [[ $ETCD_ONLY == true ]]; then
        ETCD_STATE=$($KUBECTL get node $HOSTNAME -o go-template=$'{{index .metadata.labels "node-role.kubernetes.io/etcd"}}\n' || true)

        if [ "$ETCD_STATE" = "true" ]; then
          $KUBECTL taint nodes $HOSTNAME node-role.kubernetes.io/etcd=true:NoExecute --overwrite
          $KUBECTL patch managedchart harvester -n fleet-local --type=json -p='[{"op":"replace", "path":"/spec/values/replicas", "value": 2}]'
          $KUBECTL patch managedchart harvester -n fleet-local --type=json -p='[{"op":"replace", "path":"/spec/values/webhook/replicas", "value": 2}]'
          $KUBECTL annotate --overwrite deployment rancher -n cattle-system management.cattle.io/scale-available="2"
          kickout_longhorn_node $HOSTNAME
          break
        fi

      else
        CONTROL_PLANE=$($KUBECTL get node $HOSTNAME -o go-template=$'{{index .metadata.labels "node-role.kubernetes.io/control-plane"}}\n' || true)

        if [ "$CONTROL_PLANE" = "true" ]; then
          break
        fi
      fi
      echo Waiting for promotion...
      sleep 2
    done
    `}}
